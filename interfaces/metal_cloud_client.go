// Code generated by ifacemaker; DO NOT EDIT.

package interfaces


import metalcloud "github.com/bigstepinc/metal-cloud-sdk-go"




// MetalCloudClient interface used for mocking and abstracting the backend
type MetalCloudClient interface {
	//InfrastructureDeployCustomStageAddIntoRunlevel adds a stage into a runlevel
	InfrastructureDeployCustomStageAddIntoRunlevel(infraID int, stageID int, runLevel int, stageRunMoment string) error
	//InfrastructureDeployCustomStageDeleteIntoRunlevel delete a stage into a runlevel
	InfrastructureDeployCustomStageDeleteIntoRunlevel(infraID int, stageID int, runLevel int, stageRunMoment string) error
	//InfrastructureDeployCustomStages retrieves a list of all the metalcloud.StageDefinition objects which a specified metalcloud.User is allowed to see through ownership or delegation. The stageDefinition objects never return the actual protected stageDefinition value.
	InfrastructureDeployCustomStages(infraID int, stageDefinitionType string) (*[]metalcloud.WorkflowStageAssociation, error)
	//DriveArrays retrieves the list of drives arrays of an infrastructure
	DriveArrays(infrastructureID int) (*map[string]metalcloud.DriveArray, error)
	//DriveArraysByLabel retrieves the list of drives arrays of an infrastructure
	DriveArraysByLabel(infrastructureLabel string) (*map[string]metalcloud.DriveArray, error)
	//DriveArrayGet retrieves a metalcloud.DriveArray object with specified ids
	DriveArrayGet(driveArrayID int) (*metalcloud.DriveArray, error)
	//DriveArrayGetByLabel retrieves a metalcloud.DriveArray object with specified ids
	DriveArrayGetByLabel(driveArrayLabel string) (*metalcloud.DriveArray, error)
	//DriveArrayCreate creates a drive array. Requires deploy.
	DriveArrayCreate(infrastructureID int, driveArray metalcloud.DriveArray) (*metalcloud.DriveArray, error)
	//DriveArrayCreateByLabel creates a drive array. Requires deploy.
	DriveArrayCreateByLabel(infrastructureLabel string, driveArray metalcloud.DriveArray) (*metalcloud.DriveArray, error)
	//DriveArrayEdit alters a deployed drive array. Requires deploy.
	DriveArrayEdit(driveArrayID int, driveArrayOperation metalcloud.DriveArrayOperation) (*metalcloud.DriveArray, error)
	//DriveArrayEditByLabel alters a deployed drive array. Requires deploy.
	DriveArrayEditByLabel(driveArrayLabel string, driveArrayOperation metalcloud.DriveArrayOperation) (*metalcloud.DriveArray, error)
	//DriveArrayDelete deletes a metalcloud.Drive Array with specified id
	DriveArrayDelete(driveArrayID int) error
	//DriveArrayDeleteByLabel deletes a metalcloud.Drive Array with specified id
	DriveArrayDeleteByLabel(driveArrayLabel string) error
	//DriveArrayDrives returns the drives of a drive array
	DriveArrayDrives(driveArray int) (*map[string]metalcloud.Drive, error)
	//DriveArrayDrivesByLabel returns the drives of a drive array
	DriveArrayDrivesByLabel(driveArrLabel string) (*map[string]metalcloud.Drive, error)
	//DriveSnapshotCreate creates a drive snapshot
	DriveSnapshotCreate(driveID int) (*metalcloud.Snapshot, error)
	//DriveSnapshotDelete creates a drive snapshot
	DriveSnapshotDelete(driveSnapshotID int) error
	//DriveSnapshotRollback rolls a metalcloud.Drive back to a specified DriveSnapshot. The specified snapshot is not destroyed and can be reused.
	DriveSnapshotRollback(driveSnapshotID int) error
	//DriveSnapshotGet gets a drive snapshot
	DriveSnapshotGet(driveSnapshotID int) (*metalcloud.Snapshot, error)
	//DriveSnapshots retrieves a list of all the snapshot objects
	DriveSnapshots(driveID int) (*map[string]metalcloud.Snapshot, error)
	//InfrastructureCreate creates an infrastructure
	InfrastructureCreate(infrastructure metalcloud.Infrastructure) (*metalcloud.Infrastructure, error)
	//Infrastructures returns a list of infrastructures
	Infrastructures() (*map[string]metalcloud.Infrastructure, error)
	//InfrastructureEdit alters an infrastructure
	InfrastructureEdit(infrastructureID int, infrastructureOperation metalcloud.InfrastructureOperation) (*metalcloud.Infrastructure, error)
	//InfrastructureEditByLabel alters an infrastructure
	InfrastructureEditByLabel(infrastructureLabel string, infrastructureOperation metalcloud.InfrastructureOperation) (*metalcloud.Infrastructure, error)
	//InfrastructureDelete deletes an infrastructure and all associated elements. Requires deploy
	InfrastructureDelete(infrastructureID int) error
	//InfrastructureDeleteByLabel deletes an infrastructure and all associated elements. Requires deploy
	InfrastructureDeleteByLabel(infrastructureLabel string) error
	//InfrastructureOperationCancel reverts (undos) alterations done before deploy
	InfrastructureOperationCancel(infrastructureID int) error
	//InfrastructureOperationCancelByLabel reverts (undos) alterations done before deploy
	InfrastructureOperationCancelByLabel(infrastructureLabel string) error
	//InfrastructureDeploy initiates a deploy operation that will apply all registered changes for the respective infrastructure
	InfrastructureDeploy(infrastructureID int, shutdownOptions metalcloud.ShutdownOptions, allowDataLoss bool, skipAnsible bool) error
	//InfrastructureDeployByLabel initiates a deploy operation that will apply all registered changes for the respective infrastructure
	InfrastructureDeployByLabel(infrastructureLabel string, shutdownOptions metalcloud.ShutdownOptions, allowDataLoss bool, skipAnsible bool) error
	//InfrastructureGet returns a specific infrastructure by id
	InfrastructureGet(infrastructureID int) (*metalcloud.Infrastructure, error)
	//InfrastructureGetByLabel returns a specific infrastructure by id
	InfrastructureGetByLabel(infrastructureLabel string) (*metalcloud.Infrastructure, error)
	//InfrastructureUserLimits returns user metadata
	InfrastructureUserLimits(infrastructureID int) (*map[string]interface{}, error)
	//InfrastructureUserLimitsByLabel returns user metadata
	InfrastructureUserLimitsByLabel(infrastructureLabel string) (*map[string]interface{}, error)
	//InstanceArrayInterfaceAttachNetwork attaches an InstanceArrayInterface to a metalcloud.Network
	InstanceArrayInterfaceAttachNetwork(instanceArrayID int, instanceArrayInterfaceIndex int, networkID int) (*metalcloud.InstanceArray, error)
	//InstanceArrayInterfaceDetach detaches an InstanceArrayInterface from any metalcloud.Network element that is attached to.
	InstanceArrayInterfaceDetach(instanceArrayID int, instanceArrayInterfaceIndex int) (*metalcloud.InstanceArray, error)
	//InstanceArrayGet returns an metalcloud.InstanceArray with specified id
	InstanceArrayGet(instanceArrayID int) (*metalcloud.InstanceArray, error)
	//InstanceArrayGetByLabel returns an metalcloud.InstanceArray with specified id
	InstanceArrayGetByLabel(instanceArrayLabel string) (*metalcloud.InstanceArray, error)
	//InstanceArrays returns list of instance arrays of specified infrastructure
	InstanceArrays(infrastructureID int) (*map[string]metalcloud.InstanceArray, error)
	//InstanceArraysByLabel returns list of instance arrays of specified infrastructure
	InstanceArraysByLabel(infrastructureLabel string) (*map[string]metalcloud.InstanceArray, error)
	//InstanceArrayCreate creates an instance array (colletion of identical instances). Requires Deploy.
	InstanceArrayCreate(infrastructureID int, instanceArray metalcloud.InstanceArray) (*metalcloud.InstanceArray, error)
	//InstanceArrayCreateByLabel creates an instance array (colletion of identical instances). Requires Deploy.
	InstanceArrayCreateByLabel(infrastructureLabel string, instanceArray metalcloud.InstanceArray) (*metalcloud.InstanceArray, error)
	//InstanceArrayEdit alterns a deployed instance array. Requires deploy.
	InstanceArrayEdit(instanceArrayID int, instanceArrayOperation metalcloud.InstanceArrayOperation, bSwapExistingInstancesHardware *bool, bKeepDetachingDrives *bool, objServerTypeMatches *[]metalcloud.ServerType, arrInstancesToBeDeleted *[]int) (*metalcloud.InstanceArray, error)
	//InstanceArrayEditByLabel alterns a deployed instance array. Requires deploy.
	InstanceArrayEditByLabel(instanceArrayLabel string, instanceArrayOperation metalcloud.InstanceArrayOperation, bSwapExistingInstancesHardware *bool, bKeepDetachingDrives *bool, objServerTypeMatches *[]metalcloud.ServerType, arrInstancesToBeDeleted *[]int) (*metalcloud.InstanceArray, error)
	//InstanceArrayDelete deletes an instance array. Requires deploy.
	InstanceArrayDelete(instanceArrayID int) error
	//InstanceArrayDeleteByLabel deletes an instance array. Requires deploy.
	InstanceArrayDeleteByLabel(instanceArrayLabel string) error
	//InstanceArrayInstances retrieves a list of all the metalcloud.Instance objects associated with a specified metalcloud.InstanceArray.
	InstanceArrayInstances(instanceArrayID int) (*map[string]metalcloud.Instance, error)
	//InstanceArrayInstancesByLabel retrieves a list of all the metalcloud.Instance objects associated with a specified metalcloud.InstanceArray.
	InstanceArrayInstancesByLabel(instanceArrayLabel string) (*map[string]metalcloud.Instance, error)
	//InstanceGet returns a specific instance by id
	InstanceGet(instanceID int) (*metalcloud.Instance, error)
	//InstanceGetByLabel returns a specific instance by id
	InstanceGetByLabel(instanceLabel string) (*metalcloud.Instance, error)
	//InstanceServerPowerSet reboots or powers on an instance
	InstanceServerPowerSet(instanceID int, operation string) error
	//InstanceServerPowerSetByLabel reboots or powers on an instance
	InstanceServerPowerSetByLabel(instanceLabel string, operation string) error
	//InstanceServerPowerGet returns the power status of an instance
	InstanceServerPowerGet(instanceID int) (*string, error)
	//InstanceServerPowerGetByLabel returns the power status of an instance
	InstanceServerPowerGetByLabel(instanceLabel string) (*string, error)
	//InstanceServerPowerGetBatch returns the power status of multiple instances
	InstanceServerPowerGetBatch(infrastructureID int, instanceIDs []int) (*map[string]string, error)
	//InstanceServerPowerGetBatchByLabel returns the power status of multiple instances
	InstanceServerPowerGetBatchByLabel(infrastructureLabel string, instanceIDs []int) (*map[string]string, error)
	//GetUserEmail returns the user configured for this connection
	GetUserEmail() string
	//GetEndpoint returns the endpoint configured for this connection
	GetEndpoint() string
	//GetUserID returns the ID of the user extracted from the API key
	GetUserID() int
	//NetworkGet retrieves a network object
	NetworkGet(networkID int) (*metalcloud.Network, error)
	//NetworkGetByLabel retrieves a network object
	NetworkGetByLabel(networkLabel string) (*metalcloud.Network, error)
	//Networks returns a list of all network objects of an infrastructure
	Networks(infrastructureID int) (*map[string]metalcloud.Network, error)
	//NetworksByLabel returns a list of all network objects of an infrastructure
	NetworksByLabel(infrastructureLabel string) (*map[string]metalcloud.Network, error)
	//NetworkCreate creates a network
	NetworkCreate(infrastructureID int, network metalcloud.Network) (*metalcloud.Network, error)
	//NetworkCreateByLabel creates a network
	NetworkCreateByLabel(infrastructureLabel string, network metalcloud.Network) (*metalcloud.Network, error)
	//NetworkEdit applies a change to an existing network
	NetworkEdit(networkID int, networkOperation metalcloud.NetworkOperation) (*metalcloud.Network, error)
	//NetworkEditByLabel applies a change to an existing network
	NetworkEditByLabel(networkLabel string, networkOperation metalcloud.NetworkOperation) (*metalcloud.Network, error)
	//NetworkDelete deletes a network.
	NetworkDelete(networkID int) error
	//NetworkDeleteByLabel deletes a network.
	NetworkDeleteByLabel(networkLabel string) error
	//NetworkJoin merges two specified metalcloud.Network objects.
	NetworkJoin(networkID int, networkToBeDeletedID int) error
	//NetworkJoinByLabel merges two specified metalcloud.Network objects.
	NetworkJoinByLabel(networkLabel string, networkToBeDeletedID int) error
	//OSAssetCreate creates a osAsset object
	OSAssetCreate(osAsset metalcloud.OSAsset) (*metalcloud.OSAsset, error)
	//OSAssetDelete permanently destroys a metalcloud.OSAsset.
	OSAssetDelete(osAssetID int) error
	//OSAssetUpdate updates a osAsset
	OSAssetUpdate(osAssetID int, osAsset metalcloud.OSAsset) (*metalcloud.OSAsset, error)
	//OSAssetGet returns a metalcloud.OSAsset specified by nOSAssetID. The metalcloud.OSAsset's protected value is never returned.
	OSAssetGet(osAssetID int) (*metalcloud.OSAsset, error)
	//OSAssets retrieves a list of all the metalcloud.OSAsset objects which a specified metalcloud.User is allowed to see through ownership or delegation. The metalcloud.OSAsset objects never return the actual protected metalcloud.OSAsset value.
	OSAssets() (*map[string]metalcloud.OSAsset, error)
	//OSTemplateCreate creates a osTemplate object
	OSTemplateCreate(osTemplate metalcloud.OSTemplate) (*metalcloud.OSTemplate, error)
	//OSTemplateDelete permanently destroys a metalcloud.OSTemplate.
	OSTemplateDelete(osTemplateID int) error
	//OSTemplateUpdate updates a osTemplate
	OSTemplateUpdate(osTemplateID int, osTemplate metalcloud.OSTemplate) (*metalcloud.OSTemplate, error)
	//OSTemplateGet returns a metalcloud.OSTemplate specified by nOSTemplateID. The metalcloud.OSTemplate's protected value is never returned.
	OSTemplateGet(osTemplateID int, decryptPasswd bool) (*metalcloud.OSTemplate, error)
	//OSTemplates retrieves a list of all the metalcloud.OSTemplate objects which a specified metalcloud.User is allowed to see through ownership or delegation. The metalcloud.OSTemplate objects never return the actual protected metalcloud.OSTemplate value.
	OSTemplates() (*map[string]metalcloud.OSTemplate, error)
	//OSTemplateOSAssets returns the OSAssets assigned to an metalcloud.OSTemplate.
	OSTemplateOSAssets(osTemplateID int) (*map[string]metalcloud.OSAsset, error)
	//OSTemplateAddOSAsset returns the OSAssets assigned to an metalcloud.OSTemplate.
	OSTemplateAddOSAsset(osTemplateID int, osAssetID int, path string) error
	//SecretCreate creates a secret
	SecretCreate(secret metalcloud.Secret) (*metalcloud.Secret, error)
	//SecretDelete Permanently destroys a metalcloud.Secret.
	SecretDelete(secretID int) error
	//SecretUpdate This function allows updating the secret_usage, secret_label and secret_base64 of a metalcloud.Secret
	SecretUpdate(secretID int, secret metalcloud.Secret) (*metalcloud.Secret, error)
	//SecretGet returns a metalcloud.Secret specified by nSecretID. The secret's protected value is never returned.
	SecretGet(secretID int) (*metalcloud.Secret, error)
	//Secrets retrieves a list of all the metalcloud.Secret objects which a specified metalcloud.User is allowed to see through ownership or delegation. The secret objects never return the actual protected secret value.
	Secrets(usage string) (*map[string]metalcloud.Secret, error)
	//ServersSearch searches for servers matching certain filter
	ServersSearch(filter string) (*[]metalcloud.ServerSearchResult, error)
	//ServerGet returns a server's details
	ServerGet(serverID int, decryptPasswd bool) (*metalcloud.Server, error)
	//ServerFirmwareComponentUpgrade Creates a firmware upgrading session for the specified component.
	//If no strServerComponentFirmwareNewVersion or strFirmwareBinaryURL are provided the system will use the values from the database which should have been previously added
	ServerFirmwareComponentUpgrade(serverID int, serverComponentID int, serverComponentFirmwareNewVersion string, firmwareBinaryURL string) error
	//ServerFirmwareUpgrade creates a firmware upgrading session that affects all components from the specified server that have a target version set and are updatable.
	ServerFirmwareUpgrade(serverID int) error
	//ServerFirmwareComponentTargetVersionSet Sets a firmware target version for the upgrading process. The system will apply the upgrade at the next upgrading session.
	ServerFirmwareComponentTargetVersionSet(serverComponentID int, serverComponentFirmwareNewVersion string) error
	//ServerFirmwareComponentTargetVersionUpdate Updates for every component of the specified server the available firmware versions that can be used as target by the firmware upgrading process. The available versions are extracted from a vendor specific catalog.
	ServerFirmwareComponentTargetVersionUpdate(serverComponentID int) error
	//ServerFirmwareComponentTargetVersionAdd Adds a new available firmware version for a server component along with the url of the binary. If the version already exists the old url will be overwritten.
	ServerFirmwareComponentTargetVersionAdd(serverComponentID int, version string, firmareBinaryURL string) error
	//ServerComponentGet returns a server's component's details
	ServerComponentGet(serverComponentID int) (*metalcloud.ServerComponent, error)
	//ServerComponents searches for servers matching certain filter
	ServerComponents(serverID int, filter string) (*[]metalcloud.ServerComponent, error)
	//ServerTypesMatchHardwareConfiguration Retrieves a list of server types that match the provided hardware configuration. The function does not check for availability, only compatibility, so physical servers associated with the returned server types might be unavailable.
	ServerTypesMatchHardwareConfiguration(datacenterName string, hardwareConfiguration metalcloud.HardwareConfiguration) (*map[int]metalcloud.ServerType, error)
	//ServerTypeDatacenter retrieves all the server type IDs for servers found in a specified Datacenter
	ServerTypeDatacenter(datacenterName string) (*[]int, error)
	//ServerTypes retrieves all metalcloud.ServerType objects from the database.
	ServerTypes(datacenterName string, bOnlyAvailable bool) (*map[int]metalcloud.ServerType, error)
	//ServerTypeGet retrieves a server type by id
	ServerTypeGet(serverTypeID int) (*metalcloud.ServerType, error)
	//ServerTypeGetByLabel retrieves a server type by id
	ServerTypeGetByLabel(serverTypeLabel string) (*metalcloud.ServerType, error)
	//ServerTypesMatches matches available servers with a certain metalcloud.Instance&#39;s configuration, using the properties specified in the objHardwareConfiguration object, and returns the number of compatible servers for each server_type_id.
	ServerTypesMatches(infrastructureID int, hardwareConfiguration metalcloud.HardwareConfiguration, instanceArrayID *int, bAllowServerSwap bool) (*map[string]metalcloud.ServerType, error)
	//ServerTypesMatchesByLabel matches available servers with a certain metalcloud.Instance&#39;s configuration, using the properties specified in the objHardwareConfiguration object, and returns the number of compatible servers for each server_type_id.
	ServerTypesMatchesByLabel(infrastructureLabel string, hardwareConfiguration metalcloud.HardwareConfiguration, instanceArrayID *int, bAllowServerSwap bool) (*map[string]metalcloud.ServerType, error)
	//StageDefinitionCreate creates a stageDefinition
	StageDefinitionCreate(stageDefinition metalcloud.StageDefinition) (*metalcloud.StageDefinition, error)
	//StageDefinitionDelete Permanently destroys a metalcloud.StageDefinition.
	StageDefinitionDelete(stageDefinitionID int) error
	//StageDefinitionUpdate This function allows updating the stageDefinition_usage, stageDefinition_label and stageDefinition_base64 of a metalcloud.StageDefinition
	StageDefinitionUpdate(stageDefinitionID int, stageDefinition metalcloud.StageDefinition) (*metalcloud.StageDefinition, error)
	//StageDefinitionGet returns a metalcloud.StageDefinition specified by nStageDefinitionID. The stageDefinition's protected value is never returned.
	StageDefinitionGet(stageDefinitionID int) (*metalcloud.StageDefinition, error)
	//StageDefinitions retrieves a list of all the metalcloud.StageDefinition objects which a specified metalcloud.User is allowed to see through ownership or delegation. The stageDefinition objects never return the actual protected stageDefinition value.
	StageDefinitions() (*map[string]metalcloud.StageDefinition, error)
	//UserGet describes returns user account specifications.
	UserGet(userID int) (*metalcloud.User, error)
	//UserGetByEmail describes returns user account specifications.
	UserGetByEmail(userLabel string) (*metalcloud.User, error)
	//UserEmailToUserID returns the user id of an user given an email
	UserEmailToUserID(userEmail string) (*int, error)
	//VariableCreate creates a variable object
	VariableCreate(variable metalcloud.Variable) (*metalcloud.Variable, error)
	//VariableDelete permanently destroys a metalcloud.Variable.
	VariableDelete(variableID int) error
	//VariableUpdate updates a variable
	VariableUpdate(variableID int, variable metalcloud.Variable) (*metalcloud.Variable, error)
	//VariableGet returns a metalcloud.Variable specified by nVariableID. The metalcloud.Variable's protected value is never returned.
	VariableGet(variableID int) (*metalcloud.Variable, error)
	//Variables retrieves a list of all the metalcloud.Variable objects which a specified metalcloud.User is allowed to see through ownership or delegation. The metalcloud.Variable objects never return the actual protected metalcloud.Variable value.
	Variables(usage string) (*map[string]metalcloud.Variable, error)
	//VolumeTemplates retrives the list of available templates
	VolumeTemplates() (*map[string]metalcloud.VolumeTemplate, error)
	//VolumeTemplateGet returns the specified volume template
	VolumeTemplateGet(volumeTemplateID int) (*metalcloud.VolumeTemplate, error)
	//VolumeTemplateGetByLabel returns the specified volume template
	VolumeTemplateGetByLabel(volumeTemplateLabel string) (*metalcloud.VolumeTemplate, error)
	//VolumeTemplateCreate creates a private volume template from a drive
	VolumeTemplateCreate(driveID int, label string, description string, displayName string, bootType string, deprecationStatus bool, bootMethodsSupported string, volumeTemplateTags []string) (*metalcloud.VolumeTemplate, error)
	//VolumeTemplateCreateByLabel creates a private volume template from a drive
	VolumeTemplateCreateByLabel(driveLabel string, label string, description string, displayName string, bootType string, deprecationStatus bool, bootMethodsSupported string, volumeTemplateTags []string) (*metalcloud.VolumeTemplate, error)
	//WorkflowCreate creates a workflow
	WorkflowCreate(workflow metalcloud.Workflow) (*metalcloud.Workflow, error)
	//WorkflowDelete Permanently destroys a metalcloud.Workflow.
	WorkflowDelete(workflowID int) error
	//WorkflowUpdate This function allows updating the workflow_usage, workflow_label and workflow_base64 of a metalcloud.Workflow
	WorkflowUpdate(workflowID int, workflow metalcloud.Workflow) (*metalcloud.Workflow, error)
	//WorkflowGet returns a metalcloud.Workflow specified by nWorkflowID. The workflow's protected value is never returned.
	WorkflowGet(workflowID int) (*metalcloud.Workflow, error)
	//Workflows retrieves a list of all the metalcloud.Workflow objects which a specified metalcloud.User is allowed to see through ownership or delegation.
	Workflows() (*map[string]metalcloud.Workflow, error)
	//WorkflowsWithUsage retrieves a list of all the metalcloud.Workflow objects which the current metalcloud.User is allowed to see through ownership or delegation with a specific usage.
	WorkflowsWithUsage(usage string) (*map[string]metalcloud.Workflow, error)
	//WorkflowStages retrieves a list of all the StageDefinitions objects in this workflow
	WorkflowStages(workflowID int) (*[]metalcloud.WorkflowStageDefinitionReference, error)
	//WorkflowStageGet returns a metalcloud.StageDefinition specified by workflowStageID.
	WorkflowStageGet(workflowStageID int) (*metalcloud.WorkflowStageDefinitionReference, error)
	//WorkflowStageAddAsNewRunLevel adds a new stage in this workflow
	WorkflowStageAddAsNewRunLevel(workflowID int, stageDefinitionID int, destinationRunLevel int) error
	//WorkflowStageAddIntoRunLevel adds a new stage in this workflow
	WorkflowStageAddIntoRunLevel(workflowID int, stageDefinitionID int, destinationRunLevel int) error
	//WorkflowMoveAsNewRunLevel moves a stage in this workflow from a runlevel to another
	WorkflowMoveAsNewRunLevel(workflowID int, stageDefinitionID int, sourceRunLevel int, destinationRunLevel int) error
	//WorkflowMoveIntoRunLevel moves a stage in this workflow from a runlevel to another
	WorkflowMoveIntoRunLevel(workflowID int, stageDefinitionID int, sourceRunLevel int, destinationRunLevel int) error
	//WorkflowStageDelete deletes a stage from a workflow entirelly
	WorkflowStageDelete(workflowStageID int) error
}
