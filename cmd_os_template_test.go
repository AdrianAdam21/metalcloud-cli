package main

import (
	"testing"

	metalcloud "github.com/bigstepinc/metal-cloud-sdk-go"
	mock_metalcloud "github.com/bigstepinc/metalcloud-cli/helpers"
	gomock "github.com/golang/mock/gomock"
	. "github.com/onsi/gomega"
)

func TestOSTemplatesListCmd(t *testing.T) {
	RegisterTestingT(t)
	ctrl := gomock.NewController(t)

	list := map[string]metalcloud.OSTemplate{
		"test": {
			VolumeTemplateID:        10,
			VolumeTemplateLabel:     "test",
			OSAssetBootloaderOSBoot: 100,
		},
	}

	client := mock_metalcloud.NewMockMetalCloudClient(ctrl)

	client.EXPECT().
		OSTemplates().
		Return(&list, nil).
		AnyTimes()

	asset := metalcloud.OSAsset{
		OSAssetID:       100,
		OSAssetFileName: "test",
	}

	client.EXPECT().
		OSAssetGet(list["test"].OSAssetBootloaderOSBoot).
		Return(&asset, nil).
		AnyTimes()

	//test json

	expectedFirstRow := map[string]interface{}{
		"ID":    10,
		"LABEL": "test",
	}

	testListCommand(templatesListCmd, nil, client, expectedFirstRow, t)

}

func TestOSTemplateCreateCmd(t *testing.T) {
	RegisterTestingT(t)
	ctrl := gomock.NewController(t)

	tmpl := metalcloud.OSTemplate{
		VolumeTemplateID:        10,
		VolumeTemplateLabel:     "test",
		OSAssetBootloaderOSBoot: 100,
	}

	client := mock_metalcloud.NewMockMetalCloudClient(ctrl)

	client.EXPECT().
		OSTemplateCreate(gomock.Any()).
		Return(&tmpl, nil).
		AnyTimes()

	asset := metalcloud.OSAsset{
		OSAssetID:       100,
		OSAssetFileName: "test",
	}

	client.EXPECT().
		OSAssetGet(tmpl.OSAssetBootloaderOSBoot).
		Return(&asset, nil).
		AnyTimes()

	//test json

	cases := []CommandTestCase{
		{
			name: "create-good1",
			cmd: MakeCommand(map[string]interface{}{
				"label":            tmpl.VolumeTemplateLabel,
				"display_name":     "test",
				"boot_type":        "pxe",
				"os_type":          "centos",
				"os_version":       "t0",
				"os_architecture":  "t0",
				"initial_user":     "t0",
				"initial_password": "t0",
				"initial_ssh_port": 22,
			}),
			good: true,
		},
		{
			name: "with use-autogenerated-initial-password ",
			cmd: MakeCommand(map[string]interface{}{
				"label":                              tmpl.VolumeTemplateLabel,
				"display_name":                       "test",
				"boot_type":                          "pxe",
				"os_type":                            "centos",
				"os_version":                         "t0",
				"os_architecture":                    "t0",
				"initial_user":                       "t0",
				"use_autogenerated_initial_password": true,
				"initial_ssh_port":                   22,
			}),
			good: true,
		},
		{
			name: "missing label",
			cmd: MakeCommand(map[string]interface{}{
				//"label":            tmpl.VolumeTemplateLabel,
				"display_name":     "test",
				"boot_type":        "pxe",
				"os_type":          "centos",
				"os_version":       "t0",
				"os_architecture":  "t0",
				"initial_user":     "t0",
				"initial_password": "t0",
				"initial_ssh_port": 22,
			}),
			good: false,
		},
		{
			name: "missing initial_password",
			cmd: MakeCommand(map[string]interface{}{
				"label":           tmpl.VolumeTemplateLabel,
				"display_name":    "test",
				"boot_type":       "pxe",
				"os_type":         "centos",
				"os_version":      "t0",
				"os_architecture": "t0",
				"initial_user":    "t0",
				//	"initial_password": "t0",
				"initial_ssh_port": 22,
			}),
			good: false,
		},
		{
			name: "missing initial_user",
			cmd: MakeCommand(map[string]interface{}{
				"label":           tmpl.VolumeTemplateLabel,
				"display_name":    "test",
				"boot_type":       "pxe",
				"os_type":         "centos",
				"os_version":      "t0",
				"os_architecture": "t0",
				//"initial_user":    "t0",
				"initial_password": "t0",
				"initial_ssh_port": 22,
			}),
			good: false,
		},
		{
			name: "missing either",
			cmd: MakeCommand(map[string]interface{}{
				"label":           tmpl.VolumeTemplateLabel,
				"display_name":    "test",
				"boot_type":       "pxe",
				"os_type":         "centos",
				"os_version":      "t0",
				"os_architecture": "t0",
				//"initial_user":    "t0",
				//"initial_password": "t0",
				"initial_ssh_port": 22,
			}),
			good: false,
		},
		{
			name: "both password options",
			cmd: MakeCommand(map[string]interface{}{
				"label":                              tmpl.VolumeTemplateLabel,
				"display_name":                       "test",
				"boot_type":                          "pxe",
				"os_type":                            "centos",
				"os_version":                         "t0",
				"os_architecture":                    "t0",
				"initial_user":                       "t0",
				"initial_password":                   "t0",
				"use_autogenerated_initial_password": true,
				"initial_ssh_port":                   22,
			}),
			good: false,
		},
	}

	testCreateCommand(templateCreateCmd, cases, client, t)

}
