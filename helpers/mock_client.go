// Code generated by MockGen. DO NOT EDIT.
// Source: C:\Users\Costina.Batica\go/src/github.com/metalsoft-io/metal-cloud-sdk-go//metal_cloud_client.go

// Package mock_metalcloud is a generated GoMock package.
package mock_metalcloud

import (
	metalcloud "github.com/bigstepinc/metal-cloud-sdk-go/v2"
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockMetalCloudClient is a mock of MetalCloudClient interface
type MockMetalCloudClient struct {
	ctrl     *gomock.Controller
	recorder *MockMetalCloudClientMockRecorder
}

// MockMetalCloudClientMockRecorder is the mock recorder for MockMetalCloudClient
type MockMetalCloudClientMockRecorder struct {
	mock *MockMetalCloudClient
}

// NewMockMetalCloudClient creates a new mock instance
func NewMockMetalCloudClient(ctrl *gomock.Controller) *MockMetalCloudClient {
	mock := &MockMetalCloudClient{ctrl: ctrl}
	mock.recorder = &MockMetalCloudClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockMetalCloudClient) EXPECT() *MockMetalCloudClientMockRecorder {
	return m.recorder
}

// Datacenters mocks base method
func (m *MockMetalCloudClient) Datacenters(onlyActive bool) (*map[string]metalcloud.Datacenter, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Datacenters", onlyActive)
	ret0, _ := ret[0].(*map[string]metalcloud.Datacenter)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Datacenters indicates an expected call of Datacenters
func (mr *MockMetalCloudClientMockRecorder) Datacenters(onlyActive interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Datacenters", reflect.TypeOf((*MockMetalCloudClient)(nil).Datacenters), onlyActive)
}

// DatacentersByUserID mocks base method
func (m *MockMetalCloudClient) DatacentersByUserID(userID int, onlyActive bool) (*map[string]metalcloud.Datacenter, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DatacentersByUserID", userID, onlyActive)
	ret0, _ := ret[0].(*map[string]metalcloud.Datacenter)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DatacentersByUserID indicates an expected call of DatacentersByUserID
func (mr *MockMetalCloudClientMockRecorder) DatacentersByUserID(userID, onlyActive interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DatacentersByUserID", reflect.TypeOf((*MockMetalCloudClient)(nil).DatacentersByUserID), userID, onlyActive)
}

// DatacentersByUserEmail mocks base method
func (m *MockMetalCloudClient) DatacentersByUserEmail(userEmail string, onlyActive bool) (*map[string]metalcloud.Datacenter, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DatacentersByUserEmail", userEmail, onlyActive)
	ret0, _ := ret[0].(*map[string]metalcloud.Datacenter)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DatacentersByUserEmail indicates an expected call of DatacentersByUserEmail
func (mr *MockMetalCloudClientMockRecorder) DatacentersByUserEmail(userEmail, onlyActive interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DatacentersByUserEmail", reflect.TypeOf((*MockMetalCloudClient)(nil).DatacentersByUserEmail), userEmail, onlyActive)
}

// DatacenterGet mocks base method
func (m *MockMetalCloudClient) DatacenterGet(datacenterName string) (*metalcloud.Datacenter, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DatacenterGet", datacenterName)
	ret0, _ := ret[0].(*metalcloud.Datacenter)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DatacenterGet indicates an expected call of DatacenterGet
func (mr *MockMetalCloudClientMockRecorder) DatacenterGet(datacenterName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DatacenterGet", reflect.TypeOf((*MockMetalCloudClient)(nil).DatacenterGet), datacenterName)
}

// DatacenterGetForUserByEmail mocks base method
func (m *MockMetalCloudClient) DatacenterGetForUserByEmail(datacenterName, userID string) (*metalcloud.Datacenter, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DatacenterGetForUserByEmail", datacenterName, userID)
	ret0, _ := ret[0].(*metalcloud.Datacenter)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DatacenterGetForUserByEmail indicates an expected call of DatacenterGetForUserByEmail
func (mr *MockMetalCloudClientMockRecorder) DatacenterGetForUserByEmail(datacenterName, userID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DatacenterGetForUserByEmail", reflect.TypeOf((*MockMetalCloudClient)(nil).DatacenterGetForUserByEmail), datacenterName, userID)
}

// DatacenterGetForUserByID mocks base method
func (m *MockMetalCloudClient) DatacenterGetForUserByID(datacenterName string, userID int) (*metalcloud.Datacenter, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DatacenterGetForUserByID", datacenterName, userID)
	ret0, _ := ret[0].(*metalcloud.Datacenter)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DatacenterGetForUserByID indicates an expected call of DatacenterGetForUserByID
func (mr *MockMetalCloudClientMockRecorder) DatacenterGetForUserByID(datacenterName, userID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DatacenterGetForUserByID", reflect.TypeOf((*MockMetalCloudClient)(nil).DatacenterGetForUserByID), datacenterName, userID)
}

// DatacenterConfigGet mocks base method
func (m *MockMetalCloudClient) DatacenterConfigGet(datacenterName string) (*metalcloud.DatacenterConfig, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DatacenterConfigGet", datacenterName)
	ret0, _ := ret[0].(*metalcloud.DatacenterConfig)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DatacenterConfigGet indicates an expected call of DatacenterConfigGet
func (mr *MockMetalCloudClientMockRecorder) DatacenterConfigGet(datacenterName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DatacenterConfigGet", reflect.TypeOf((*MockMetalCloudClient)(nil).DatacenterConfigGet), datacenterName)
}

// DatacenterConfigUpdate mocks base method
func (m *MockMetalCloudClient) DatacenterConfigUpdate(datacenterName string, datacenterConfig metalcloud.DatacenterConfig) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DatacenterConfigUpdate", datacenterName, datacenterConfig)
	ret0, _ := ret[0].(error)
	return ret0
}

// DatacenterConfigUpdate indicates an expected call of DatacenterConfigUpdate
func (mr *MockMetalCloudClientMockRecorder) DatacenterConfigUpdate(datacenterName, datacenterConfig interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DatacenterConfigUpdate", reflect.TypeOf((*MockMetalCloudClient)(nil).DatacenterConfigUpdate), datacenterName, datacenterConfig)
}

// DatacenterCreate mocks base method
func (m *MockMetalCloudClient) DatacenterCreate(datacenter metalcloud.Datacenter, datacenterConfig metalcloud.DatacenterConfig) (*metalcloud.Datacenter, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DatacenterCreate", datacenter, datacenterConfig)
	ret0, _ := ret[0].(*metalcloud.Datacenter)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DatacenterCreate indicates an expected call of DatacenterCreate
func (mr *MockMetalCloudClientMockRecorder) DatacenterCreate(datacenter, datacenterConfig interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DatacenterCreate", reflect.TypeOf((*MockMetalCloudClient)(nil).DatacenterCreate), datacenter, datacenterConfig)
}

// DatacenterAgentsConfigJSONDownloadURL mocks base method
func (m *MockMetalCloudClient) DatacenterAgentsConfigJSONDownloadURL(datacenterName string, decrypt bool) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DatacenterAgentsConfigJSONDownloadURL", datacenterName, decrypt)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DatacenterAgentsConfigJSONDownloadURL indicates an expected call of DatacenterAgentsConfigJSONDownloadURL
func (mr *MockMetalCloudClientMockRecorder) DatacenterAgentsConfigJSONDownloadURL(datacenterName, decrypt interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DatacenterAgentsConfigJSONDownloadURL", reflect.TypeOf((*MockMetalCloudClient)(nil).DatacenterAgentsConfigJSONDownloadURL), datacenterName, decrypt)
}

// DriveArrays mocks base method
func (m *MockMetalCloudClient) DriveArrays(infrastructureID int) (*map[string]metalcloud.DriveArray, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DriveArrays", infrastructureID)
	ret0, _ := ret[0].(*map[string]metalcloud.DriveArray)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DriveArrays indicates an expected call of DriveArrays
func (mr *MockMetalCloudClientMockRecorder) DriveArrays(infrastructureID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DriveArrays", reflect.TypeOf((*MockMetalCloudClient)(nil).DriveArrays), infrastructureID)
}

// DriveArraysByLabel mocks base method
func (m *MockMetalCloudClient) DriveArraysByLabel(infrastructureLabel string) (*map[string]metalcloud.DriveArray, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DriveArraysByLabel", infrastructureLabel)
	ret0, _ := ret[0].(*map[string]metalcloud.DriveArray)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DriveArraysByLabel indicates an expected call of DriveArraysByLabel
func (mr *MockMetalCloudClientMockRecorder) DriveArraysByLabel(infrastructureLabel interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DriveArraysByLabel", reflect.TypeOf((*MockMetalCloudClient)(nil).DriveArraysByLabel), infrastructureLabel)
}

// DriveArrayGet mocks base method
func (m *MockMetalCloudClient) DriveArrayGet(driveArrayID int) (*metalcloud.DriveArray, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DriveArrayGet", driveArrayID)
	ret0, _ := ret[0].(*metalcloud.DriveArray)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DriveArrayGet indicates an expected call of DriveArrayGet
func (mr *MockMetalCloudClientMockRecorder) DriveArrayGet(driveArrayID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DriveArrayGet", reflect.TypeOf((*MockMetalCloudClient)(nil).DriveArrayGet), driveArrayID)
}

// DriveArrayGetByLabel mocks base method
func (m *MockMetalCloudClient) DriveArrayGetByLabel(driveArrayLabel string) (*metalcloud.DriveArray, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DriveArrayGetByLabel", driveArrayLabel)
	ret0, _ := ret[0].(*metalcloud.DriveArray)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DriveArrayGetByLabel indicates an expected call of DriveArrayGetByLabel
func (mr *MockMetalCloudClientMockRecorder) DriveArrayGetByLabel(driveArrayLabel interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DriveArrayGetByLabel", reflect.TypeOf((*MockMetalCloudClient)(nil).DriveArrayGetByLabel), driveArrayLabel)
}

// DriveArrayCreate mocks base method
func (m *MockMetalCloudClient) DriveArrayCreate(infrastructureID int, driveArray metalcloud.DriveArray) (*metalcloud.DriveArray, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DriveArrayCreate", infrastructureID, driveArray)
	ret0, _ := ret[0].(*metalcloud.DriveArray)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DriveArrayCreate indicates an expected call of DriveArrayCreate
func (mr *MockMetalCloudClientMockRecorder) DriveArrayCreate(infrastructureID, driveArray interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DriveArrayCreate", reflect.TypeOf((*MockMetalCloudClient)(nil).DriveArrayCreate), infrastructureID, driveArray)
}

// DriveArrayCreateByLabel mocks base method
func (m *MockMetalCloudClient) DriveArrayCreateByLabel(infrastructureLabel string, driveArray metalcloud.DriveArray) (*metalcloud.DriveArray, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DriveArrayCreateByLabel", infrastructureLabel, driveArray)
	ret0, _ := ret[0].(*metalcloud.DriveArray)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DriveArrayCreateByLabel indicates an expected call of DriveArrayCreateByLabel
func (mr *MockMetalCloudClientMockRecorder) DriveArrayCreateByLabel(infrastructureLabel, driveArray interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DriveArrayCreateByLabel", reflect.TypeOf((*MockMetalCloudClient)(nil).DriveArrayCreateByLabel), infrastructureLabel, driveArray)
}

// DriveArrayEdit mocks base method
func (m *MockMetalCloudClient) DriveArrayEdit(driveArrayID int, driveArrayOperation metalcloud.DriveArrayOperation) (*metalcloud.DriveArray, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DriveArrayEdit", driveArrayID, driveArrayOperation)
	ret0, _ := ret[0].(*metalcloud.DriveArray)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DriveArrayEdit indicates an expected call of DriveArrayEdit
func (mr *MockMetalCloudClientMockRecorder) DriveArrayEdit(driveArrayID, driveArrayOperation interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DriveArrayEdit", reflect.TypeOf((*MockMetalCloudClient)(nil).DriveArrayEdit), driveArrayID, driveArrayOperation)
}

// DriveArrayEditByLabel mocks base method
func (m *MockMetalCloudClient) DriveArrayEditByLabel(driveArrayLabel string, driveArrayOperation metalcloud.DriveArrayOperation) (*metalcloud.DriveArray, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DriveArrayEditByLabel", driveArrayLabel, driveArrayOperation)
	ret0, _ := ret[0].(*metalcloud.DriveArray)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DriveArrayEditByLabel indicates an expected call of DriveArrayEditByLabel
func (mr *MockMetalCloudClientMockRecorder) DriveArrayEditByLabel(driveArrayLabel, driveArrayOperation interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DriveArrayEditByLabel", reflect.TypeOf((*MockMetalCloudClient)(nil).DriveArrayEditByLabel), driveArrayLabel, driveArrayOperation)
}

// DriveArrayDelete mocks base method
func (m *MockMetalCloudClient) DriveArrayDelete(driveArrayID int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DriveArrayDelete", driveArrayID)
	ret0, _ := ret[0].(error)
	return ret0
}

// DriveArrayDelete indicates an expected call of DriveArrayDelete
func (mr *MockMetalCloudClientMockRecorder) DriveArrayDelete(driveArrayID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DriveArrayDelete", reflect.TypeOf((*MockMetalCloudClient)(nil).DriveArrayDelete), driveArrayID)
}

// DriveArrayDeleteByLabel mocks base method
func (m *MockMetalCloudClient) DriveArrayDeleteByLabel(driveArrayLabel string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DriveArrayDeleteByLabel", driveArrayLabel)
	ret0, _ := ret[0].(error)
	return ret0
}

// DriveArrayDeleteByLabel indicates an expected call of DriveArrayDeleteByLabel
func (mr *MockMetalCloudClientMockRecorder) DriveArrayDeleteByLabel(driveArrayLabel interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DriveArrayDeleteByLabel", reflect.TypeOf((*MockMetalCloudClient)(nil).DriveArrayDeleteByLabel), driveArrayLabel)
}

// DriveArrayDrives mocks base method
func (m *MockMetalCloudClient) DriveArrayDrives(driveArray int) (*map[string]metalcloud.Drive, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DriveArrayDrives", driveArray)
	ret0, _ := ret[0].(*map[string]metalcloud.Drive)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DriveArrayDrives indicates an expected call of DriveArrayDrives
func (mr *MockMetalCloudClientMockRecorder) DriveArrayDrives(driveArray interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DriveArrayDrives", reflect.TypeOf((*MockMetalCloudClient)(nil).DriveArrayDrives), driveArray)
}

// DriveArrayDrivesByLabel mocks base method
func (m *MockMetalCloudClient) DriveArrayDrivesByLabel(driveArrLabel string) (*map[string]metalcloud.Drive, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DriveArrayDrivesByLabel", driveArrLabel)
	ret0, _ := ret[0].(*map[string]metalcloud.Drive)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DriveArrayDrivesByLabel indicates an expected call of DriveArrayDrivesByLabel
func (mr *MockMetalCloudClientMockRecorder) DriveArrayDrivesByLabel(driveArrLabel interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DriveArrayDrivesByLabel", reflect.TypeOf((*MockMetalCloudClient)(nil).DriveArrayDrivesByLabel), driveArrLabel)
}

// DriveSnapshotCreate mocks base method
func (m *MockMetalCloudClient) DriveSnapshotCreate(driveID int) (*metalcloud.Snapshot, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DriveSnapshotCreate", driveID)
	ret0, _ := ret[0].(*metalcloud.Snapshot)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DriveSnapshotCreate indicates an expected call of DriveSnapshotCreate
func (mr *MockMetalCloudClientMockRecorder) DriveSnapshotCreate(driveID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DriveSnapshotCreate", reflect.TypeOf((*MockMetalCloudClient)(nil).DriveSnapshotCreate), driveID)
}

// DriveSnapshotDelete mocks base method
func (m *MockMetalCloudClient) DriveSnapshotDelete(driveSnapshotID int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DriveSnapshotDelete", driveSnapshotID)
	ret0, _ := ret[0].(error)
	return ret0
}

// DriveSnapshotDelete indicates an expected call of DriveSnapshotDelete
func (mr *MockMetalCloudClientMockRecorder) DriveSnapshotDelete(driveSnapshotID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DriveSnapshotDelete", reflect.TypeOf((*MockMetalCloudClient)(nil).DriveSnapshotDelete), driveSnapshotID)
}

// DriveSnapshotRollback mocks base method
func (m *MockMetalCloudClient) DriveSnapshotRollback(driveSnapshotID int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DriveSnapshotRollback", driveSnapshotID)
	ret0, _ := ret[0].(error)
	return ret0
}

// DriveSnapshotRollback indicates an expected call of DriveSnapshotRollback
func (mr *MockMetalCloudClientMockRecorder) DriveSnapshotRollback(driveSnapshotID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DriveSnapshotRollback", reflect.TypeOf((*MockMetalCloudClient)(nil).DriveSnapshotRollback), driveSnapshotID)
}

// DriveSnapshotGet mocks base method
func (m *MockMetalCloudClient) DriveSnapshotGet(driveSnapshotID int) (*metalcloud.Snapshot, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DriveSnapshotGet", driveSnapshotID)
	ret0, _ := ret[0].(*metalcloud.Snapshot)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DriveSnapshotGet indicates an expected call of DriveSnapshotGet
func (mr *MockMetalCloudClientMockRecorder) DriveSnapshotGet(driveSnapshotID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DriveSnapshotGet", reflect.TypeOf((*MockMetalCloudClient)(nil).DriveSnapshotGet), driveSnapshotID)
}

// DriveSnapshots mocks base method
func (m *MockMetalCloudClient) DriveSnapshots(driveID int) (*map[string]metalcloud.Snapshot, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DriveSnapshots", driveID)
	ret0, _ := ret[0].(*map[string]metalcloud.Snapshot)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DriveSnapshots indicates an expected call of DriveSnapshots
func (mr *MockMetalCloudClientMockRecorder) DriveSnapshots(driveID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DriveSnapshots", reflect.TypeOf((*MockMetalCloudClient)(nil).DriveSnapshots), driveID)
}

// InfrastructureCreate mocks base method
func (m *MockMetalCloudClient) InfrastructureCreate(infrastructure metalcloud.Infrastructure) (*metalcloud.Infrastructure, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InfrastructureCreate", infrastructure)
	ret0, _ := ret[0].(*metalcloud.Infrastructure)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// InfrastructureCreate indicates an expected call of InfrastructureCreate
func (mr *MockMetalCloudClientMockRecorder) InfrastructureCreate(infrastructure interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InfrastructureCreate", reflect.TypeOf((*MockMetalCloudClient)(nil).InfrastructureCreate), infrastructure)
}

// Infrastructures mocks base method
func (m *MockMetalCloudClient) Infrastructures() (*map[string]metalcloud.Infrastructure, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Infrastructures")
	ret0, _ := ret[0].(*map[string]metalcloud.Infrastructure)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Infrastructures indicates an expected call of Infrastructures
func (mr *MockMetalCloudClientMockRecorder) Infrastructures() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Infrastructures", reflect.TypeOf((*MockMetalCloudClient)(nil).Infrastructures))
}

// InfrastructureEdit mocks base method
func (m *MockMetalCloudClient) InfrastructureEdit(infrastructureID int, infrastructureOperation metalcloud.InfrastructureOperation) (*metalcloud.Infrastructure, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InfrastructureEdit", infrastructureID, infrastructureOperation)
	ret0, _ := ret[0].(*metalcloud.Infrastructure)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// InfrastructureEdit indicates an expected call of InfrastructureEdit
func (mr *MockMetalCloudClientMockRecorder) InfrastructureEdit(infrastructureID, infrastructureOperation interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InfrastructureEdit", reflect.TypeOf((*MockMetalCloudClient)(nil).InfrastructureEdit), infrastructureID, infrastructureOperation)
}

// InfrastructureEditByLabel mocks base method
func (m *MockMetalCloudClient) InfrastructureEditByLabel(infrastructureLabel string, infrastructureOperation metalcloud.InfrastructureOperation) (*metalcloud.Infrastructure, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InfrastructureEditByLabel", infrastructureLabel, infrastructureOperation)
	ret0, _ := ret[0].(*metalcloud.Infrastructure)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// InfrastructureEditByLabel indicates an expected call of InfrastructureEditByLabel
func (mr *MockMetalCloudClientMockRecorder) InfrastructureEditByLabel(infrastructureLabel, infrastructureOperation interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InfrastructureEditByLabel", reflect.TypeOf((*MockMetalCloudClient)(nil).InfrastructureEditByLabel), infrastructureLabel, infrastructureOperation)
}

// InfrastructureDelete mocks base method
func (m *MockMetalCloudClient) InfrastructureDelete(infrastructureID int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InfrastructureDelete", infrastructureID)
	ret0, _ := ret[0].(error)
	return ret0
}

// InfrastructureDelete indicates an expected call of InfrastructureDelete
func (mr *MockMetalCloudClientMockRecorder) InfrastructureDelete(infrastructureID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InfrastructureDelete", reflect.TypeOf((*MockMetalCloudClient)(nil).InfrastructureDelete), infrastructureID)
}

// InfrastructureDeleteByLabel mocks base method
func (m *MockMetalCloudClient) InfrastructureDeleteByLabel(infrastructureLabel string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InfrastructureDeleteByLabel", infrastructureLabel)
	ret0, _ := ret[0].(error)
	return ret0
}

// InfrastructureDeleteByLabel indicates an expected call of InfrastructureDeleteByLabel
func (mr *MockMetalCloudClientMockRecorder) InfrastructureDeleteByLabel(infrastructureLabel interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InfrastructureDeleteByLabel", reflect.TypeOf((*MockMetalCloudClient)(nil).InfrastructureDeleteByLabel), infrastructureLabel)
}

// InfrastructureOperationCancel mocks base method
func (m *MockMetalCloudClient) InfrastructureOperationCancel(infrastructureID int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InfrastructureOperationCancel", infrastructureID)
	ret0, _ := ret[0].(error)
	return ret0
}

// InfrastructureOperationCancel indicates an expected call of InfrastructureOperationCancel
func (mr *MockMetalCloudClientMockRecorder) InfrastructureOperationCancel(infrastructureID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InfrastructureOperationCancel", reflect.TypeOf((*MockMetalCloudClient)(nil).InfrastructureOperationCancel), infrastructureID)
}

// InfrastructureOperationCancelByLabel mocks base method
func (m *MockMetalCloudClient) InfrastructureOperationCancelByLabel(infrastructureLabel string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InfrastructureOperationCancelByLabel", infrastructureLabel)
	ret0, _ := ret[0].(error)
	return ret0
}

// InfrastructureOperationCancelByLabel indicates an expected call of InfrastructureOperationCancelByLabel
func (mr *MockMetalCloudClientMockRecorder) InfrastructureOperationCancelByLabel(infrastructureLabel interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InfrastructureOperationCancelByLabel", reflect.TypeOf((*MockMetalCloudClient)(nil).InfrastructureOperationCancelByLabel), infrastructureLabel)
}

// InfrastructureDeploy mocks base method
func (m *MockMetalCloudClient) InfrastructureDeploy(infrastructureID int, shutdownOptions metalcloud.ShutdownOptions, allowDataLoss, skipAnsible bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InfrastructureDeploy", infrastructureID, shutdownOptions, allowDataLoss, skipAnsible)
	ret0, _ := ret[0].(error)
	return ret0
}

// InfrastructureDeploy indicates an expected call of InfrastructureDeploy
func (mr *MockMetalCloudClientMockRecorder) InfrastructureDeploy(infrastructureID, shutdownOptions, allowDataLoss, skipAnsible interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InfrastructureDeploy", reflect.TypeOf((*MockMetalCloudClient)(nil).InfrastructureDeploy), infrastructureID, shutdownOptions, allowDataLoss, skipAnsible)
}

// InfrastructureDeployByLabel mocks base method
func (m *MockMetalCloudClient) InfrastructureDeployByLabel(infrastructureLabel string, shutdownOptions metalcloud.ShutdownOptions, allowDataLoss, skipAnsible bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InfrastructureDeployByLabel", infrastructureLabel, shutdownOptions, allowDataLoss, skipAnsible)
	ret0, _ := ret[0].(error)
	return ret0
}

// InfrastructureDeployByLabel indicates an expected call of InfrastructureDeployByLabel
func (mr *MockMetalCloudClientMockRecorder) InfrastructureDeployByLabel(infrastructureLabel, shutdownOptions, allowDataLoss, skipAnsible interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InfrastructureDeployByLabel", reflect.TypeOf((*MockMetalCloudClient)(nil).InfrastructureDeployByLabel), infrastructureLabel, shutdownOptions, allowDataLoss, skipAnsible)
}

// InfrastructureDeployWithOptions mocks base method
func (m *MockMetalCloudClient) InfrastructureDeployWithOptions(infrastructureID int, shutdownOptions metalcloud.ShutdownOptions, deployOptions *metalcloud.DeployOptions, allowDataLoss, skipAnsible bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InfrastructureDeployWithOptions", infrastructureID, shutdownOptions, deployOptions, allowDataLoss, skipAnsible)
	ret0, _ := ret[0].(error)
	return ret0
}

// InfrastructureDeployWithOptions indicates an expected call of InfrastructureDeployWithOptions
func (mr *MockMetalCloudClientMockRecorder) InfrastructureDeployWithOptions(infrastructureID, shutdownOptions, deployOptions, allowDataLoss, skipAnsible interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InfrastructureDeployWithOptions", reflect.TypeOf((*MockMetalCloudClient)(nil).InfrastructureDeployWithOptions), infrastructureID, shutdownOptions, deployOptions, allowDataLoss, skipAnsible)
}

// InfrastructureDeployWithOptionsByLabel mocks base method
func (m *MockMetalCloudClient) InfrastructureDeployWithOptionsByLabel(infrastructureLabel string, shutdownOptions metalcloud.ShutdownOptions, deployOptions *metalcloud.DeployOptions, allowDataLoss, skipAnsible bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InfrastructureDeployWithOptionsByLabel", infrastructureLabel, shutdownOptions, deployOptions, allowDataLoss, skipAnsible)
	ret0, _ := ret[0].(error)
	return ret0
}

// InfrastructureDeployWithOptionsByLabel indicates an expected call of InfrastructureDeployWithOptionsByLabel
func (mr *MockMetalCloudClientMockRecorder) InfrastructureDeployWithOptionsByLabel(infrastructureLabel, shutdownOptions, deployOptions, allowDataLoss, skipAnsible interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InfrastructureDeployWithOptionsByLabel", reflect.TypeOf((*MockMetalCloudClient)(nil).InfrastructureDeployWithOptionsByLabel), infrastructureLabel, shutdownOptions, deployOptions, allowDataLoss, skipAnsible)
}

// InfrastructureGet mocks base method
func (m *MockMetalCloudClient) InfrastructureGet(infrastructureID int) (*metalcloud.Infrastructure, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InfrastructureGet", infrastructureID)
	ret0, _ := ret[0].(*metalcloud.Infrastructure)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// InfrastructureGet indicates an expected call of InfrastructureGet
func (mr *MockMetalCloudClientMockRecorder) InfrastructureGet(infrastructureID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InfrastructureGet", reflect.TypeOf((*MockMetalCloudClient)(nil).InfrastructureGet), infrastructureID)
}

// InfrastructureGetByLabel mocks base method
func (m *MockMetalCloudClient) InfrastructureGetByLabel(infrastructureLabel string) (*metalcloud.Infrastructure, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InfrastructureGetByLabel", infrastructureLabel)
	ret0, _ := ret[0].(*metalcloud.Infrastructure)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// InfrastructureGetByLabel indicates an expected call of InfrastructureGetByLabel
func (mr *MockMetalCloudClientMockRecorder) InfrastructureGetByLabel(infrastructureLabel interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InfrastructureGetByLabel", reflect.TypeOf((*MockMetalCloudClient)(nil).InfrastructureGetByLabel), infrastructureLabel)
}

// InfrastructureUserLimits mocks base method
func (m *MockMetalCloudClient) InfrastructureUserLimits(infrastructureID int) (*map[string]interface{}, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InfrastructureUserLimits", infrastructureID)
	ret0, _ := ret[0].(*map[string]interface{})
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// InfrastructureUserLimits indicates an expected call of InfrastructureUserLimits
func (mr *MockMetalCloudClientMockRecorder) InfrastructureUserLimits(infrastructureID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InfrastructureUserLimits", reflect.TypeOf((*MockMetalCloudClient)(nil).InfrastructureUserLimits), infrastructureID)
}

// InfrastructureUserLimitsByLabel mocks base method
func (m *MockMetalCloudClient) InfrastructureUserLimitsByLabel(infrastructureLabel string) (*map[string]interface{}, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InfrastructureUserLimitsByLabel", infrastructureLabel)
	ret0, _ := ret[0].(*map[string]interface{})
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// InfrastructureUserLimitsByLabel indicates an expected call of InfrastructureUserLimitsByLabel
func (mr *MockMetalCloudClientMockRecorder) InfrastructureUserLimitsByLabel(infrastructureLabel interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InfrastructureUserLimitsByLabel", reflect.TypeOf((*MockMetalCloudClient)(nil).InfrastructureUserLimitsByLabel), infrastructureLabel)
}

// InstanceArrayInterfaceAttachNetwork mocks base method
func (m *MockMetalCloudClient) InstanceArrayInterfaceAttachNetwork(instanceArrayID, instanceArrayInterfaceIndex, networkID int) (*metalcloud.InstanceArray, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InstanceArrayInterfaceAttachNetwork", instanceArrayID, instanceArrayInterfaceIndex, networkID)
	ret0, _ := ret[0].(*metalcloud.InstanceArray)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// InstanceArrayInterfaceAttachNetwork indicates an expected call of InstanceArrayInterfaceAttachNetwork
func (mr *MockMetalCloudClientMockRecorder) InstanceArrayInterfaceAttachNetwork(instanceArrayID, instanceArrayInterfaceIndex, networkID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InstanceArrayInterfaceAttachNetwork", reflect.TypeOf((*MockMetalCloudClient)(nil).InstanceArrayInterfaceAttachNetwork), instanceArrayID, instanceArrayInterfaceIndex, networkID)
}

// InstanceArrayInterfaceDetach mocks base method
func (m *MockMetalCloudClient) InstanceArrayInterfaceDetach(instanceArrayID, instanceArrayInterfaceIndex int) (*metalcloud.InstanceArray, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InstanceArrayInterfaceDetach", instanceArrayID, instanceArrayInterfaceIndex)
	ret0, _ := ret[0].(*metalcloud.InstanceArray)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// InstanceArrayInterfaceDetach indicates an expected call of InstanceArrayInterfaceDetach
func (mr *MockMetalCloudClientMockRecorder) InstanceArrayInterfaceDetach(instanceArrayID, instanceArrayInterfaceIndex interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InstanceArrayInterfaceDetach", reflect.TypeOf((*MockMetalCloudClient)(nil).InstanceArrayInterfaceDetach), instanceArrayID, instanceArrayInterfaceIndex)
}

// InstanceArrayGet mocks base method
func (m *MockMetalCloudClient) InstanceArrayGet(instanceArrayID int) (*metalcloud.InstanceArray, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InstanceArrayGet", instanceArrayID)
	ret0, _ := ret[0].(*metalcloud.InstanceArray)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// InstanceArrayGet indicates an expected call of InstanceArrayGet
func (mr *MockMetalCloudClientMockRecorder) InstanceArrayGet(instanceArrayID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InstanceArrayGet", reflect.TypeOf((*MockMetalCloudClient)(nil).InstanceArrayGet), instanceArrayID)
}

// InstanceArrayGetByLabel mocks base method
func (m *MockMetalCloudClient) InstanceArrayGetByLabel(instanceArrayLabel string) (*metalcloud.InstanceArray, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InstanceArrayGetByLabel", instanceArrayLabel)
	ret0, _ := ret[0].(*metalcloud.InstanceArray)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// InstanceArrayGetByLabel indicates an expected call of InstanceArrayGetByLabel
func (mr *MockMetalCloudClientMockRecorder) InstanceArrayGetByLabel(instanceArrayLabel interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InstanceArrayGetByLabel", reflect.TypeOf((*MockMetalCloudClient)(nil).InstanceArrayGetByLabel), instanceArrayLabel)
}

// InstanceArrays mocks base method
func (m *MockMetalCloudClient) InstanceArrays(infrastructureID int) (*map[string]metalcloud.InstanceArray, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InstanceArrays", infrastructureID)
	ret0, _ := ret[0].(*map[string]metalcloud.InstanceArray)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// InstanceArrays indicates an expected call of InstanceArrays
func (mr *MockMetalCloudClientMockRecorder) InstanceArrays(infrastructureID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InstanceArrays", reflect.TypeOf((*MockMetalCloudClient)(nil).InstanceArrays), infrastructureID)
}

// InstanceArraysByLabel mocks base method
func (m *MockMetalCloudClient) InstanceArraysByLabel(infrastructureLabel string) (*map[string]metalcloud.InstanceArray, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InstanceArraysByLabel", infrastructureLabel)
	ret0, _ := ret[0].(*map[string]metalcloud.InstanceArray)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// InstanceArraysByLabel indicates an expected call of InstanceArraysByLabel
func (mr *MockMetalCloudClientMockRecorder) InstanceArraysByLabel(infrastructureLabel interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InstanceArraysByLabel", reflect.TypeOf((*MockMetalCloudClient)(nil).InstanceArraysByLabel), infrastructureLabel)
}

// InstanceArrayCreate mocks base method
func (m *MockMetalCloudClient) InstanceArrayCreate(infrastructureID int, instanceArray metalcloud.InstanceArray) (*metalcloud.InstanceArray, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InstanceArrayCreate", infrastructureID, instanceArray)
	ret0, _ := ret[0].(*metalcloud.InstanceArray)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// InstanceArrayCreate indicates an expected call of InstanceArrayCreate
func (mr *MockMetalCloudClientMockRecorder) InstanceArrayCreate(infrastructureID, instanceArray interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InstanceArrayCreate", reflect.TypeOf((*MockMetalCloudClient)(nil).InstanceArrayCreate), infrastructureID, instanceArray)
}

// InstanceArrayCreateByLabel mocks base method
func (m *MockMetalCloudClient) InstanceArrayCreateByLabel(infrastructureLabel string, instanceArray metalcloud.InstanceArray) (*metalcloud.InstanceArray, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InstanceArrayCreateByLabel", infrastructureLabel, instanceArray)
	ret0, _ := ret[0].(*metalcloud.InstanceArray)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// InstanceArrayCreateByLabel indicates an expected call of InstanceArrayCreateByLabel
func (mr *MockMetalCloudClientMockRecorder) InstanceArrayCreateByLabel(infrastructureLabel, instanceArray interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InstanceArrayCreateByLabel", reflect.TypeOf((*MockMetalCloudClient)(nil).InstanceArrayCreateByLabel), infrastructureLabel, instanceArray)
}

// InstanceArrayEdit mocks base method
func (m *MockMetalCloudClient) InstanceArrayEdit(instanceArrayID int, instanceArrayOperation metalcloud.InstanceArrayOperation, bSwapExistingInstancesHardware, bKeepDetachingDrives *bool, objServerTypeMatches *metalcloud.ServerTypeMatches, arrInstancesToBeDeleted *[]int) (*metalcloud.InstanceArray, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InstanceArrayEdit", instanceArrayID, instanceArrayOperation, bSwapExistingInstancesHardware, bKeepDetachingDrives, objServerTypeMatches, arrInstancesToBeDeleted)
	ret0, _ := ret[0].(*metalcloud.InstanceArray)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// InstanceArrayEdit indicates an expected call of InstanceArrayEdit
func (mr *MockMetalCloudClientMockRecorder) InstanceArrayEdit(instanceArrayID, instanceArrayOperation, bSwapExistingInstancesHardware, bKeepDetachingDrives, objServerTypeMatches, arrInstancesToBeDeleted interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InstanceArrayEdit", reflect.TypeOf((*MockMetalCloudClient)(nil).InstanceArrayEdit), instanceArrayID, instanceArrayOperation, bSwapExistingInstancesHardware, bKeepDetachingDrives, objServerTypeMatches, arrInstancesToBeDeleted)
}

// InstanceArrayEditByLabel mocks base method
func (m *MockMetalCloudClient) InstanceArrayEditByLabel(instanceArrayLabel string, instanceArrayOperation metalcloud.InstanceArrayOperation, bSwapExistingInstancesHardware, bKeepDetachingDrives *bool, objServerTypeMatches *metalcloud.ServerTypeMatches, arrInstancesToBeDeleted *[]int) (*metalcloud.InstanceArray, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InstanceArrayEditByLabel", instanceArrayLabel, instanceArrayOperation, bSwapExistingInstancesHardware, bKeepDetachingDrives, objServerTypeMatches, arrInstancesToBeDeleted)
	ret0, _ := ret[0].(*metalcloud.InstanceArray)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// InstanceArrayEditByLabel indicates an expected call of InstanceArrayEditByLabel
func (mr *MockMetalCloudClientMockRecorder) InstanceArrayEditByLabel(instanceArrayLabel, instanceArrayOperation, bSwapExistingInstancesHardware, bKeepDetachingDrives, objServerTypeMatches, arrInstancesToBeDeleted interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InstanceArrayEditByLabel", reflect.TypeOf((*MockMetalCloudClient)(nil).InstanceArrayEditByLabel), instanceArrayLabel, instanceArrayOperation, bSwapExistingInstancesHardware, bKeepDetachingDrives, objServerTypeMatches, arrInstancesToBeDeleted)
}

// InstanceArrayDelete mocks base method
func (m *MockMetalCloudClient) InstanceArrayDelete(instanceArrayID int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InstanceArrayDelete", instanceArrayID)
	ret0, _ := ret[0].(error)
	return ret0
}

// InstanceArrayDelete indicates an expected call of InstanceArrayDelete
func (mr *MockMetalCloudClientMockRecorder) InstanceArrayDelete(instanceArrayID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InstanceArrayDelete", reflect.TypeOf((*MockMetalCloudClient)(nil).InstanceArrayDelete), instanceArrayID)
}

// InstanceArrayDeleteByLabel mocks base method
func (m *MockMetalCloudClient) InstanceArrayDeleteByLabel(instanceArrayLabel string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InstanceArrayDeleteByLabel", instanceArrayLabel)
	ret0, _ := ret[0].(error)
	return ret0
}

// InstanceArrayDeleteByLabel indicates an expected call of InstanceArrayDeleteByLabel
func (mr *MockMetalCloudClientMockRecorder) InstanceArrayDeleteByLabel(instanceArrayLabel interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InstanceArrayDeleteByLabel", reflect.TypeOf((*MockMetalCloudClient)(nil).InstanceArrayDeleteByLabel), instanceArrayLabel)
}

// InstanceArrayStop mocks base method
func (m *MockMetalCloudClient) InstanceArrayStop(instanceArrayID int) (*metalcloud.InstanceArray, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InstanceArrayStop", instanceArrayID)
	ret0, _ := ret[0].(*metalcloud.InstanceArray)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// InstanceArrayStop indicates an expected call of InstanceArrayStop
func (mr *MockMetalCloudClientMockRecorder) InstanceArrayStop(instanceArrayID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InstanceArrayStop", reflect.TypeOf((*MockMetalCloudClient)(nil).InstanceArrayStop), instanceArrayID)
}

// InstanceArrayStopByLabel mocks base method
func (m *MockMetalCloudClient) InstanceArrayStopByLabel(instanceArrayLabel string) (*metalcloud.InstanceArray, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InstanceArrayStopByLabel", instanceArrayLabel)
	ret0, _ := ret[0].(*metalcloud.InstanceArray)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// InstanceArrayStopByLabel indicates an expected call of InstanceArrayStopByLabel
func (mr *MockMetalCloudClientMockRecorder) InstanceArrayStopByLabel(instanceArrayLabel interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InstanceArrayStopByLabel", reflect.TypeOf((*MockMetalCloudClient)(nil).InstanceArrayStopByLabel), instanceArrayLabel)
}

// InstanceArrayStart mocks base method
func (m *MockMetalCloudClient) InstanceArrayStart(instanceArrayID int) (*metalcloud.InstanceArray, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InstanceArrayStart", instanceArrayID)
	ret0, _ := ret[0].(*metalcloud.InstanceArray)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// InstanceArrayStart indicates an expected call of InstanceArrayStart
func (mr *MockMetalCloudClientMockRecorder) InstanceArrayStart(instanceArrayID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InstanceArrayStart", reflect.TypeOf((*MockMetalCloudClient)(nil).InstanceArrayStart), instanceArrayID)
}

// InstanceArrayStartByLabel mocks base method
func (m *MockMetalCloudClient) InstanceArrayStartByLabel(instanceArrayLabel string) (*metalcloud.InstanceArray, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InstanceArrayStartByLabel", instanceArrayLabel)
	ret0, _ := ret[0].(*metalcloud.InstanceArray)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// InstanceArrayStartByLabel indicates an expected call of InstanceArrayStartByLabel
func (mr *MockMetalCloudClientMockRecorder) InstanceArrayStartByLabel(instanceArrayLabel interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InstanceArrayStartByLabel", reflect.TypeOf((*MockMetalCloudClient)(nil).InstanceArrayStartByLabel), instanceArrayLabel)
}

// InstanceArrayInstances mocks base method
func (m *MockMetalCloudClient) InstanceArrayInstances(instanceArrayID int) (*map[string]metalcloud.Instance, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InstanceArrayInstances", instanceArrayID)
	ret0, _ := ret[0].(*map[string]metalcloud.Instance)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// InstanceArrayInstances indicates an expected call of InstanceArrayInstances
func (mr *MockMetalCloudClientMockRecorder) InstanceArrayInstances(instanceArrayID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InstanceArrayInstances", reflect.TypeOf((*MockMetalCloudClient)(nil).InstanceArrayInstances), instanceArrayID)
}

// InstanceArrayInstancesByLabel mocks base method
func (m *MockMetalCloudClient) InstanceArrayInstancesByLabel(instanceArrayLabel string) (*map[string]metalcloud.Instance, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InstanceArrayInstancesByLabel", instanceArrayLabel)
	ret0, _ := ret[0].(*map[string]metalcloud.Instance)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// InstanceArrayInstancesByLabel indicates an expected call of InstanceArrayInstancesByLabel
func (mr *MockMetalCloudClientMockRecorder) InstanceArrayInstancesByLabel(instanceArrayLabel interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InstanceArrayInstancesByLabel", reflect.TypeOf((*MockMetalCloudClient)(nil).InstanceArrayInstancesByLabel), instanceArrayLabel)
}

// InstanceGet mocks base method
func (m *MockMetalCloudClient) InstanceGet(instanceID int) (*metalcloud.Instance, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InstanceGet", instanceID)
	ret0, _ := ret[0].(*metalcloud.Instance)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// InstanceGet indicates an expected call of InstanceGet
func (mr *MockMetalCloudClientMockRecorder) InstanceGet(instanceID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InstanceGet", reflect.TypeOf((*MockMetalCloudClient)(nil).InstanceGet), instanceID)
}

// InstanceGetByLabel mocks base method
func (m *MockMetalCloudClient) InstanceGetByLabel(instanceLabel string) (*metalcloud.Instance, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InstanceGetByLabel", instanceLabel)
	ret0, _ := ret[0].(*metalcloud.Instance)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// InstanceGetByLabel indicates an expected call of InstanceGetByLabel
func (mr *MockMetalCloudClientMockRecorder) InstanceGetByLabel(instanceLabel interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InstanceGetByLabel", reflect.TypeOf((*MockMetalCloudClient)(nil).InstanceGetByLabel), instanceLabel)
}

// InstanceServerPowerSet mocks base method
func (m *MockMetalCloudClient) InstanceServerPowerSet(instanceID int, operation string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InstanceServerPowerSet", instanceID, operation)
	ret0, _ := ret[0].(error)
	return ret0
}

// InstanceServerPowerSet indicates an expected call of InstanceServerPowerSet
func (mr *MockMetalCloudClientMockRecorder) InstanceServerPowerSet(instanceID, operation interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InstanceServerPowerSet", reflect.TypeOf((*MockMetalCloudClient)(nil).InstanceServerPowerSet), instanceID, operation)
}

// InstanceServerPowerSetByLabel mocks base method
func (m *MockMetalCloudClient) InstanceServerPowerSetByLabel(instanceLabel, operation string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InstanceServerPowerSetByLabel", instanceLabel, operation)
	ret0, _ := ret[0].(error)
	return ret0
}

// InstanceServerPowerSetByLabel indicates an expected call of InstanceServerPowerSetByLabel
func (mr *MockMetalCloudClientMockRecorder) InstanceServerPowerSetByLabel(instanceLabel, operation interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InstanceServerPowerSetByLabel", reflect.TypeOf((*MockMetalCloudClient)(nil).InstanceServerPowerSetByLabel), instanceLabel, operation)
}

// InstanceServerPowerGet mocks base method
func (m *MockMetalCloudClient) InstanceServerPowerGet(instanceID int) (*string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InstanceServerPowerGet", instanceID)
	ret0, _ := ret[0].(*string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// InstanceServerPowerGet indicates an expected call of InstanceServerPowerGet
func (mr *MockMetalCloudClientMockRecorder) InstanceServerPowerGet(instanceID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InstanceServerPowerGet", reflect.TypeOf((*MockMetalCloudClient)(nil).InstanceServerPowerGet), instanceID)
}

// InstanceServerPowerGetByLabel mocks base method
func (m *MockMetalCloudClient) InstanceServerPowerGetByLabel(instanceLabel string) (*string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InstanceServerPowerGetByLabel", instanceLabel)
	ret0, _ := ret[0].(*string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// InstanceServerPowerGetByLabel indicates an expected call of InstanceServerPowerGetByLabel
func (mr *MockMetalCloudClientMockRecorder) InstanceServerPowerGetByLabel(instanceLabel interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InstanceServerPowerGetByLabel", reflect.TypeOf((*MockMetalCloudClient)(nil).InstanceServerPowerGetByLabel), instanceLabel)
}

// InstanceServerPowerGetBatch mocks base method
func (m *MockMetalCloudClient) InstanceServerPowerGetBatch(infrastructureID int, instanceIDs []int) (*map[string]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InstanceServerPowerGetBatch", infrastructureID, instanceIDs)
	ret0, _ := ret[0].(*map[string]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// InstanceServerPowerGetBatch indicates an expected call of InstanceServerPowerGetBatch
func (mr *MockMetalCloudClientMockRecorder) InstanceServerPowerGetBatch(infrastructureID, instanceIDs interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InstanceServerPowerGetBatch", reflect.TypeOf((*MockMetalCloudClient)(nil).InstanceServerPowerGetBatch), infrastructureID, instanceIDs)
}

// InstanceServerPowerGetBatchByLabel mocks base method
func (m *MockMetalCloudClient) InstanceServerPowerGetBatchByLabel(infrastructureLabel string, instanceIDs []int) (*map[string]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InstanceServerPowerGetBatchByLabel", infrastructureLabel, instanceIDs)
	ret0, _ := ret[0].(*map[string]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// InstanceServerPowerGetBatchByLabel indicates an expected call of InstanceServerPowerGetBatchByLabel
func (mr *MockMetalCloudClientMockRecorder) InstanceServerPowerGetBatchByLabel(infrastructureLabel, instanceIDs interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InstanceServerPowerGetBatchByLabel", reflect.TypeOf((*MockMetalCloudClient)(nil).InstanceServerPowerGetBatchByLabel), infrastructureLabel, instanceIDs)
}

// GetUserEmail mocks base method
func (m *MockMetalCloudClient) GetUserEmail() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserEmail")
	ret0, _ := ret[0].(string)
	return ret0
}

// GetUserEmail indicates an expected call of GetUserEmail
func (mr *MockMetalCloudClientMockRecorder) GetUserEmail() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserEmail", reflect.TypeOf((*MockMetalCloudClient)(nil).GetUserEmail))
}

// GetEndpoint mocks base method
func (m *MockMetalCloudClient) GetEndpoint() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetEndpoint")
	ret0, _ := ret[0].(string)
	return ret0
}

// GetEndpoint indicates an expected call of GetEndpoint
func (mr *MockMetalCloudClientMockRecorder) GetEndpoint() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetEndpoint", reflect.TypeOf((*MockMetalCloudClient)(nil).GetEndpoint))
}

// GetUserID mocks base method
func (m *MockMetalCloudClient) GetUserID() int {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserID")
	ret0, _ := ret[0].(int)
	return ret0
}

// GetUserID indicates an expected call of GetUserID
func (mr *MockMetalCloudClientMockRecorder) GetUserID() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserID", reflect.TypeOf((*MockMetalCloudClient)(nil).GetUserID))
}

// NetworkGet mocks base method
func (m *MockMetalCloudClient) NetworkGet(networkID int) (*metalcloud.Network, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NetworkGet", networkID)
	ret0, _ := ret[0].(*metalcloud.Network)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// NetworkGet indicates an expected call of NetworkGet
func (mr *MockMetalCloudClientMockRecorder) NetworkGet(networkID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NetworkGet", reflect.TypeOf((*MockMetalCloudClient)(nil).NetworkGet), networkID)
}

// NetworkGetByLabel mocks base method
func (m *MockMetalCloudClient) NetworkGetByLabel(networkLabel string) (*metalcloud.Network, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NetworkGetByLabel", networkLabel)
	ret0, _ := ret[0].(*metalcloud.Network)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// NetworkGetByLabel indicates an expected call of NetworkGetByLabel
func (mr *MockMetalCloudClientMockRecorder) NetworkGetByLabel(networkLabel interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NetworkGetByLabel", reflect.TypeOf((*MockMetalCloudClient)(nil).NetworkGetByLabel), networkLabel)
}

// Networks mocks base method
func (m *MockMetalCloudClient) Networks(infrastructureID int) (*map[string]metalcloud.Network, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Networks", infrastructureID)
	ret0, _ := ret[0].(*map[string]metalcloud.Network)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Networks indicates an expected call of Networks
func (mr *MockMetalCloudClientMockRecorder) Networks(infrastructureID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Networks", reflect.TypeOf((*MockMetalCloudClient)(nil).Networks), infrastructureID)
}

// NetworksByLabel mocks base method
func (m *MockMetalCloudClient) NetworksByLabel(infrastructureLabel string) (*map[string]metalcloud.Network, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NetworksByLabel", infrastructureLabel)
	ret0, _ := ret[0].(*map[string]metalcloud.Network)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// NetworksByLabel indicates an expected call of NetworksByLabel
func (mr *MockMetalCloudClientMockRecorder) NetworksByLabel(infrastructureLabel interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NetworksByLabel", reflect.TypeOf((*MockMetalCloudClient)(nil).NetworksByLabel), infrastructureLabel)
}

// NetworkCreate mocks base method
func (m *MockMetalCloudClient) NetworkCreate(infrastructureID int, network metalcloud.Network) (*metalcloud.Network, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NetworkCreate", infrastructureID, network)
	ret0, _ := ret[0].(*metalcloud.Network)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// NetworkCreate indicates an expected call of NetworkCreate
func (mr *MockMetalCloudClientMockRecorder) NetworkCreate(infrastructureID, network interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NetworkCreate", reflect.TypeOf((*MockMetalCloudClient)(nil).NetworkCreate), infrastructureID, network)
}

// NetworkCreateByLabel mocks base method
func (m *MockMetalCloudClient) NetworkCreateByLabel(infrastructureLabel string, network metalcloud.Network) (*metalcloud.Network, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NetworkCreateByLabel", infrastructureLabel, network)
	ret0, _ := ret[0].(*metalcloud.Network)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// NetworkCreateByLabel indicates an expected call of NetworkCreateByLabel
func (mr *MockMetalCloudClientMockRecorder) NetworkCreateByLabel(infrastructureLabel, network interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NetworkCreateByLabel", reflect.TypeOf((*MockMetalCloudClient)(nil).NetworkCreateByLabel), infrastructureLabel, network)
}

// NetworkEdit mocks base method
func (m *MockMetalCloudClient) NetworkEdit(networkID int, networkOperation metalcloud.NetworkOperation) (*metalcloud.Network, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NetworkEdit", networkID, networkOperation)
	ret0, _ := ret[0].(*metalcloud.Network)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// NetworkEdit indicates an expected call of NetworkEdit
func (mr *MockMetalCloudClientMockRecorder) NetworkEdit(networkID, networkOperation interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NetworkEdit", reflect.TypeOf((*MockMetalCloudClient)(nil).NetworkEdit), networkID, networkOperation)
}

// NetworkEditByLabel mocks base method
func (m *MockMetalCloudClient) NetworkEditByLabel(networkLabel string, networkOperation metalcloud.NetworkOperation) (*metalcloud.Network, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NetworkEditByLabel", networkLabel, networkOperation)
	ret0, _ := ret[0].(*metalcloud.Network)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// NetworkEditByLabel indicates an expected call of NetworkEditByLabel
func (mr *MockMetalCloudClientMockRecorder) NetworkEditByLabel(networkLabel, networkOperation interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NetworkEditByLabel", reflect.TypeOf((*MockMetalCloudClient)(nil).NetworkEditByLabel), networkLabel, networkOperation)
}

// NetworkDelete mocks base method
func (m *MockMetalCloudClient) NetworkDelete(networkID int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NetworkDelete", networkID)
	ret0, _ := ret[0].(error)
	return ret0
}

// NetworkDelete indicates an expected call of NetworkDelete
func (mr *MockMetalCloudClientMockRecorder) NetworkDelete(networkID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NetworkDelete", reflect.TypeOf((*MockMetalCloudClient)(nil).NetworkDelete), networkID)
}

// NetworkDeleteByLabel mocks base method
func (m *MockMetalCloudClient) NetworkDeleteByLabel(networkLabel string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NetworkDeleteByLabel", networkLabel)
	ret0, _ := ret[0].(error)
	return ret0
}

// NetworkDeleteByLabel indicates an expected call of NetworkDeleteByLabel
func (mr *MockMetalCloudClientMockRecorder) NetworkDeleteByLabel(networkLabel interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NetworkDeleteByLabel", reflect.TypeOf((*MockMetalCloudClient)(nil).NetworkDeleteByLabel), networkLabel)
}

// NetworkJoin mocks base method
func (m *MockMetalCloudClient) NetworkJoin(networkID, networkToBeDeletedID int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NetworkJoin", networkID, networkToBeDeletedID)
	ret0, _ := ret[0].(error)
	return ret0
}

// NetworkJoin indicates an expected call of NetworkJoin
func (mr *MockMetalCloudClientMockRecorder) NetworkJoin(networkID, networkToBeDeletedID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NetworkJoin", reflect.TypeOf((*MockMetalCloudClient)(nil).NetworkJoin), networkID, networkToBeDeletedID)
}

// NetworkJoinByLabel mocks base method
func (m *MockMetalCloudClient) NetworkJoinByLabel(networkLabel string, networkToBeDeletedID int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NetworkJoinByLabel", networkLabel, networkToBeDeletedID)
	ret0, _ := ret[0].(error)
	return ret0
}

// NetworkJoinByLabel indicates an expected call of NetworkJoinByLabel
func (mr *MockMetalCloudClientMockRecorder) NetworkJoinByLabel(networkLabel, networkToBeDeletedID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NetworkJoinByLabel", reflect.TypeOf((*MockMetalCloudClient)(nil).NetworkJoinByLabel), networkLabel, networkToBeDeletedID)
}

// OSAssetCreate mocks base method
func (m *MockMetalCloudClient) OSAssetCreate(osAsset metalcloud.OSAsset) (*metalcloud.OSAsset, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "OSAssetCreate", osAsset)
	ret0, _ := ret[0].(*metalcloud.OSAsset)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// OSAssetCreate indicates an expected call of OSAssetCreate
func (mr *MockMetalCloudClientMockRecorder) OSAssetCreate(osAsset interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "OSAssetCreate", reflect.TypeOf((*MockMetalCloudClient)(nil).OSAssetCreate), osAsset)
}

// OSAssetDelete mocks base method
func (m *MockMetalCloudClient) OSAssetDelete(osAssetID int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "OSAssetDelete", osAssetID)
	ret0, _ := ret[0].(error)
	return ret0
}

// OSAssetDelete indicates an expected call of OSAssetDelete
func (mr *MockMetalCloudClientMockRecorder) OSAssetDelete(osAssetID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "OSAssetDelete", reflect.TypeOf((*MockMetalCloudClient)(nil).OSAssetDelete), osAssetID)
}

// OSAssetUpdate mocks base method
func (m *MockMetalCloudClient) OSAssetUpdate(osAssetID int, osAsset metalcloud.OSAsset) (*metalcloud.OSAsset, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "OSAssetUpdate", osAssetID, osAsset)
	ret0, _ := ret[0].(*metalcloud.OSAsset)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// OSAssetUpdate indicates an expected call of OSAssetUpdate
func (mr *MockMetalCloudClientMockRecorder) OSAssetUpdate(osAssetID, osAsset interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "OSAssetUpdate", reflect.TypeOf((*MockMetalCloudClient)(nil).OSAssetUpdate), osAssetID, osAsset)
}

// OSAssetGet mocks base method
func (m *MockMetalCloudClient) OSAssetGet(osAssetID int) (*metalcloud.OSAsset, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "OSAssetGet", osAssetID)
	ret0, _ := ret[0].(*metalcloud.OSAsset)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// OSAssetGet indicates an expected call of OSAssetGet
func (mr *MockMetalCloudClientMockRecorder) OSAssetGet(osAssetID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "OSAssetGet", reflect.TypeOf((*MockMetalCloudClient)(nil).OSAssetGet), osAssetID)
}

// OSAssets mocks base method
func (m *MockMetalCloudClient) OSAssets() (*map[string]metalcloud.OSAsset, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "OSAssets")
	ret0, _ := ret[0].(*map[string]metalcloud.OSAsset)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// OSAssets indicates an expected call of OSAssets
func (mr *MockMetalCloudClientMockRecorder) OSAssets() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "OSAssets", reflect.TypeOf((*MockMetalCloudClient)(nil).OSAssets))
}

// OSTemplateCreate mocks base method
func (m *MockMetalCloudClient) OSTemplateCreate(osTemplate metalcloud.OSTemplate) (*metalcloud.OSTemplate, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "OSTemplateCreate", osTemplate)
	ret0, _ := ret[0].(*metalcloud.OSTemplate)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// OSTemplateCreate indicates an expected call of OSTemplateCreate
func (mr *MockMetalCloudClientMockRecorder) OSTemplateCreate(osTemplate interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "OSTemplateCreate", reflect.TypeOf((*MockMetalCloudClient)(nil).OSTemplateCreate), osTemplate)
}

// OSTemplateDelete mocks base method
func (m *MockMetalCloudClient) OSTemplateDelete(osTemplateID int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "OSTemplateDelete", osTemplateID)
	ret0, _ := ret[0].(error)
	return ret0
}

// OSTemplateDelete indicates an expected call of OSTemplateDelete
func (mr *MockMetalCloudClientMockRecorder) OSTemplateDelete(osTemplateID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "OSTemplateDelete", reflect.TypeOf((*MockMetalCloudClient)(nil).OSTemplateDelete), osTemplateID)
}

// OSTemplateUpdate mocks base method
func (m *MockMetalCloudClient) OSTemplateUpdate(osTemplateID int, osTemplate metalcloud.OSTemplate) (*metalcloud.OSTemplate, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "OSTemplateUpdate", osTemplateID, osTemplate)
	ret0, _ := ret[0].(*metalcloud.OSTemplate)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// OSTemplateUpdate indicates an expected call of OSTemplateUpdate
func (mr *MockMetalCloudClientMockRecorder) OSTemplateUpdate(osTemplateID, osTemplate interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "OSTemplateUpdate", reflect.TypeOf((*MockMetalCloudClient)(nil).OSTemplateUpdate), osTemplateID, osTemplate)
}

// OSTemplateGet mocks base method
func (m *MockMetalCloudClient) OSTemplateGet(osTemplateID int, decryptPasswd bool) (*metalcloud.OSTemplate, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "OSTemplateGet", osTemplateID, decryptPasswd)
	ret0, _ := ret[0].(*metalcloud.OSTemplate)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// OSTemplateGet indicates an expected call of OSTemplateGet
func (mr *MockMetalCloudClientMockRecorder) OSTemplateGet(osTemplateID, decryptPasswd interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "OSTemplateGet", reflect.TypeOf((*MockMetalCloudClient)(nil).OSTemplateGet), osTemplateID, decryptPasswd)
}

// OSTemplates mocks base method
func (m *MockMetalCloudClient) OSTemplates() (*map[string]metalcloud.OSTemplate, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "OSTemplates")
	ret0, _ := ret[0].(*map[string]metalcloud.OSTemplate)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// OSTemplates indicates an expected call of OSTemplates
func (mr *MockMetalCloudClientMockRecorder) OSTemplates() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "OSTemplates", reflect.TypeOf((*MockMetalCloudClient)(nil).OSTemplates))
}

// OSTemplateOSAssets mocks base method
func (m *MockMetalCloudClient) OSTemplateOSAssets(osTemplateID int) (*map[string]metalcloud.OSTemplateOSAssetData, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "OSTemplateOSAssets", osTemplateID)
	ret0, _ := ret[0].(*map[string]metalcloud.OSTemplateOSAssetData)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// OSTemplateOSAssets indicates an expected call of OSTemplateOSAssets
func (mr *MockMetalCloudClientMockRecorder) OSTemplateOSAssets(osTemplateID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "OSTemplateOSAssets", reflect.TypeOf((*MockMetalCloudClient)(nil).OSTemplateOSAssets), osTemplateID)
}

// OSTemplateAddOSAsset mocks base method
func (m *MockMetalCloudClient) OSTemplateAddOSAsset(osTemplateID, osAssetID int, path, variablesJSON string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "OSTemplateAddOSAsset", osTemplateID, osAssetID, path, variablesJSON)
	ret0, _ := ret[0].(error)
	return ret0
}

// OSTemplateAddOSAsset indicates an expected call of OSTemplateAddOSAsset
func (mr *MockMetalCloudClientMockRecorder) OSTemplateAddOSAsset(osTemplateID, osAssetID, path, variablesJSON interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "OSTemplateAddOSAsset", reflect.TypeOf((*MockMetalCloudClient)(nil).OSTemplateAddOSAsset), osTemplateID, osAssetID, path, variablesJSON)
}

// OSTemplateRemoveOSAsset mocks base method
func (m *MockMetalCloudClient) OSTemplateRemoveOSAsset(osTemplateID, osAssetID int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "OSTemplateRemoveOSAsset", osTemplateID, osAssetID)
	ret0, _ := ret[0].(error)
	return ret0
}

// OSTemplateRemoveOSAsset indicates an expected call of OSTemplateRemoveOSAsset
func (mr *MockMetalCloudClientMockRecorder) OSTemplateRemoveOSAsset(osTemplateID, osAssetID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "OSTemplateRemoveOSAsset", reflect.TypeOf((*MockMetalCloudClient)(nil).OSTemplateRemoveOSAsset), osTemplateID, osAssetID)
}

// OSTemplateUpdateOSAssetPath mocks base method
func (m *MockMetalCloudClient) OSTemplateUpdateOSAssetPath(osTemplateID, osAssetID int, path string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "OSTemplateUpdateOSAssetPath", osTemplateID, osAssetID, path)
	ret0, _ := ret[0].(error)
	return ret0
}

// OSTemplateUpdateOSAssetPath indicates an expected call of OSTemplateUpdateOSAssetPath
func (mr *MockMetalCloudClientMockRecorder) OSTemplateUpdateOSAssetPath(osTemplateID, osAssetID, path interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "OSTemplateUpdateOSAssetPath", reflect.TypeOf((*MockMetalCloudClient)(nil).OSTemplateUpdateOSAssetPath), osTemplateID, osAssetID, path)
}

// OSTemplateUpdateOSAssetVariables mocks base method
func (m *MockMetalCloudClient) OSTemplateUpdateOSAssetVariables(osTemplateID, osAssetID int, variablesJSON string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "OSTemplateUpdateOSAssetVariables", osTemplateID, osAssetID, variablesJSON)
	ret0, _ := ret[0].(error)
	return ret0
}

// OSTemplateUpdateOSAssetVariables indicates an expected call of OSTemplateUpdateOSAssetVariables
func (mr *MockMetalCloudClientMockRecorder) OSTemplateUpdateOSAssetVariables(osTemplateID, osAssetID, variablesJSON interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "OSTemplateUpdateOSAssetVariables", reflect.TypeOf((*MockMetalCloudClient)(nil).OSTemplateUpdateOSAssetVariables), osTemplateID, osAssetID, variablesJSON)
}

// OSTemplateMakePublic mocks base method
func (m *MockMetalCloudClient) OSTemplateMakePublic(osTemplateID int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "OSTemplateMakePublic", osTemplateID)
	ret0, _ := ret[0].(error)
	return ret0
}

// OSTemplateMakePublic indicates an expected call of OSTemplateMakePublic
func (mr *MockMetalCloudClientMockRecorder) OSTemplateMakePublic(osTemplateID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "OSTemplateMakePublic", reflect.TypeOf((*MockMetalCloudClient)(nil).OSTemplateMakePublic), osTemplateID)
}

// OSTemplateMakePrivate mocks base method
func (m *MockMetalCloudClient) OSTemplateMakePrivate(osTemplateID, userID int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "OSTemplateMakePrivate", osTemplateID, userID)
	ret0, _ := ret[0].(error)
	return ret0
}

// OSTemplateMakePrivate indicates an expected call of OSTemplateMakePrivate
func (mr *MockMetalCloudClientMockRecorder) OSTemplateMakePrivate(osTemplateID, userID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "OSTemplateMakePrivate", reflect.TypeOf((*MockMetalCloudClient)(nil).OSTemplateMakePrivate), osTemplateID, userID)
}

// SecretCreate mocks base method
func (m *MockMetalCloudClient) SecretCreate(secret metalcloud.Secret) (*metalcloud.Secret, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SecretCreate", secret)
	ret0, _ := ret[0].(*metalcloud.Secret)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SecretCreate indicates an expected call of SecretCreate
func (mr *MockMetalCloudClientMockRecorder) SecretCreate(secret interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SecretCreate", reflect.TypeOf((*MockMetalCloudClient)(nil).SecretCreate), secret)
}

// SecretDelete mocks base method
func (m *MockMetalCloudClient) SecretDelete(secretID int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SecretDelete", secretID)
	ret0, _ := ret[0].(error)
	return ret0
}

// SecretDelete indicates an expected call of SecretDelete
func (mr *MockMetalCloudClientMockRecorder) SecretDelete(secretID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SecretDelete", reflect.TypeOf((*MockMetalCloudClient)(nil).SecretDelete), secretID)
}

// SecretUpdate mocks base method
func (m *MockMetalCloudClient) SecretUpdate(secretID int, secret metalcloud.Secret) (*metalcloud.Secret, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SecretUpdate", secretID, secret)
	ret0, _ := ret[0].(*metalcloud.Secret)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SecretUpdate indicates an expected call of SecretUpdate
func (mr *MockMetalCloudClientMockRecorder) SecretUpdate(secretID, secret interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SecretUpdate", reflect.TypeOf((*MockMetalCloudClient)(nil).SecretUpdate), secretID, secret)
}

// SecretGet mocks base method
func (m *MockMetalCloudClient) SecretGet(secretID int) (*metalcloud.Secret, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SecretGet", secretID)
	ret0, _ := ret[0].(*metalcloud.Secret)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SecretGet indicates an expected call of SecretGet
func (mr *MockMetalCloudClientMockRecorder) SecretGet(secretID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SecretGet", reflect.TypeOf((*MockMetalCloudClient)(nil).SecretGet), secretID)
}

// Secrets mocks base method
func (m *MockMetalCloudClient) Secrets(usage string) (*map[string]metalcloud.Secret, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Secrets", usage)
	ret0, _ := ret[0].(*map[string]metalcloud.Secret)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Secrets indicates an expected call of Secrets
func (mr *MockMetalCloudClientMockRecorder) Secrets(usage interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Secrets", reflect.TypeOf((*MockMetalCloudClient)(nil).Secrets), usage)
}

// ServersSearch mocks base method
func (m *MockMetalCloudClient) ServersSearch(filter string) (*[]metalcloud.ServerSearchResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ServersSearch", filter)
	ret0, _ := ret[0].(*[]metalcloud.ServerSearchResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ServersSearch indicates an expected call of ServersSearch
func (mr *MockMetalCloudClientMockRecorder) ServersSearch(filter interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ServersSearch", reflect.TypeOf((*MockMetalCloudClient)(nil).ServersSearch), filter)
}

// ServerGetByUUID mocks base method
func (m *MockMetalCloudClient) ServerGetByUUID(serverUUID string, decryptPasswd bool) (*metalcloud.Server, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ServerGetByUUID", serverUUID, decryptPasswd)
	ret0, _ := ret[0].(*metalcloud.Server)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ServerGetByUUID indicates an expected call of ServerGetByUUID
func (mr *MockMetalCloudClientMockRecorder) ServerGetByUUID(serverUUID, decryptPasswd interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ServerGetByUUID", reflect.TypeOf((*MockMetalCloudClient)(nil).ServerGetByUUID), serverUUID, decryptPasswd)
}

// ServerGet mocks base method
func (m *MockMetalCloudClient) ServerGet(serverID int, decryptPasswd bool) (*metalcloud.Server, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ServerGet", serverID, decryptPasswd)
	ret0, _ := ret[0].(*metalcloud.Server)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ServerGet indicates an expected call of ServerGet
func (mr *MockMetalCloudClientMockRecorder) ServerGet(serverID, decryptPasswd interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ServerGet", reflect.TypeOf((*MockMetalCloudClient)(nil).ServerGet), serverID, decryptPasswd)
}

// ServerCreate mocks base method
func (m *MockMetalCloudClient) ServerCreate(server metalcloud.Server, autoGenerate bool) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ServerCreate", server, autoGenerate)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ServerCreate indicates an expected call of ServerCreate
func (mr *MockMetalCloudClientMockRecorder) ServerCreate(server, autoGenerate interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ServerCreate", reflect.TypeOf((*MockMetalCloudClient)(nil).ServerCreate), server, autoGenerate)
}

// ServerEditComplete mocks base method
func (m *MockMetalCloudClient) ServerEditComplete(serverID int, server metalcloud.Server) (*metalcloud.Server, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ServerEditComplete", serverID, server)
	ret0, _ := ret[0].(*metalcloud.Server)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ServerEditComplete indicates an expected call of ServerEditComplete
func (mr *MockMetalCloudClientMockRecorder) ServerEditComplete(serverID, server interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ServerEditComplete", reflect.TypeOf((*MockMetalCloudClient)(nil).ServerEditComplete), serverID, server)
}

// ServerEditIPMI mocks base method
func (m *MockMetalCloudClient) ServerEditIPMI(serverID int, server metalcloud.Server) (*metalcloud.Server, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ServerEditIPMI", serverID, server)
	ret0, _ := ret[0].(*metalcloud.Server)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ServerEditIPMI indicates an expected call of ServerEditIPMI
func (mr *MockMetalCloudClientMockRecorder) ServerEditIPMI(serverID, server interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ServerEditIPMI", reflect.TypeOf((*MockMetalCloudClient)(nil).ServerEditIPMI), serverID, server)
}

// ServerEditAvailability mocks base method
func (m *MockMetalCloudClient) ServerEditAvailability(serverID int, server metalcloud.Server) (*metalcloud.Server, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ServerEditAvailability", serverID, server)
	ret0, _ := ret[0].(*metalcloud.Server)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ServerEditAvailability indicates an expected call of ServerEditAvailability
func (mr *MockMetalCloudClientMockRecorder) ServerEditAvailability(serverID, server interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ServerEditAvailability", reflect.TypeOf((*MockMetalCloudClient)(nil).ServerEditAvailability), serverID, server)
}

// ServerEdit mocks base method
func (m *MockMetalCloudClient) ServerEdit(serverID int, serverEditType string, server metalcloud.Server) (*metalcloud.Server, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ServerEdit", serverID, serverEditType, server)
	ret0, _ := ret[0].(*metalcloud.Server)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ServerEdit indicates an expected call of ServerEdit
func (mr *MockMetalCloudClientMockRecorder) ServerEdit(serverID, serverEditType, server interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ServerEdit", reflect.TypeOf((*MockMetalCloudClient)(nil).ServerEdit), serverID, serverEditType, server)
}

// ServerDelete mocks base method
func (m *MockMetalCloudClient) ServerDelete(serverID int, skipIPMI bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ServerDelete", serverID, skipIPMI)
	ret0, _ := ret[0].(error)
	return ret0
}

// ServerDelete indicates an expected call of ServerDelete
func (mr *MockMetalCloudClientMockRecorder) ServerDelete(serverID, skipIPMI interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ServerDelete", reflect.TypeOf((*MockMetalCloudClient)(nil).ServerDelete), serverID, skipIPMI)
}

// ServerDecomission mocks base method
func (m *MockMetalCloudClient) ServerDecomission(serverID int, skipIPMI bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ServerDecomission", serverID, skipIPMI)
	ret0, _ := ret[0].(error)
	return ret0
}

// ServerDecomission indicates an expected call of ServerDecomission
func (mr *MockMetalCloudClientMockRecorder) ServerDecomission(serverID, skipIPMI interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ServerDecomission", reflect.TypeOf((*MockMetalCloudClient)(nil).ServerDecomission), serverID, skipIPMI)
}

// ServerFirmwareComponentUpgrade mocks base method
func (m *MockMetalCloudClient) ServerFirmwareComponentUpgrade(serverID, serverComponentID int, serverComponentFirmwareNewVersion, firmwareBinaryURL string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ServerFirmwareComponentUpgrade", serverID, serverComponentID, serverComponentFirmwareNewVersion, firmwareBinaryURL)
	ret0, _ := ret[0].(error)
	return ret0
}

// ServerFirmwareComponentUpgrade indicates an expected call of ServerFirmwareComponentUpgrade
func (mr *MockMetalCloudClientMockRecorder) ServerFirmwareComponentUpgrade(serverID, serverComponentID, serverComponentFirmwareNewVersion, firmwareBinaryURL interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ServerFirmwareComponentUpgrade", reflect.TypeOf((*MockMetalCloudClient)(nil).ServerFirmwareComponentUpgrade), serverID, serverComponentID, serverComponentFirmwareNewVersion, firmwareBinaryURL)
}

// ServerFirmwareUpgrade mocks base method
func (m *MockMetalCloudClient) ServerFirmwareUpgrade(serverID int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ServerFirmwareUpgrade", serverID)
	ret0, _ := ret[0].(error)
	return ret0
}

// ServerFirmwareUpgrade indicates an expected call of ServerFirmwareUpgrade
func (mr *MockMetalCloudClientMockRecorder) ServerFirmwareUpgrade(serverID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ServerFirmwareUpgrade", reflect.TypeOf((*MockMetalCloudClient)(nil).ServerFirmwareUpgrade), serverID)
}

// ServerFirmwareComponentTargetVersionSet mocks base method
func (m *MockMetalCloudClient) ServerFirmwareComponentTargetVersionSet(serverComponentID int, serverComponentFirmwareNewVersion string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ServerFirmwareComponentTargetVersionSet", serverComponentID, serverComponentFirmwareNewVersion)
	ret0, _ := ret[0].(error)
	return ret0
}

// ServerFirmwareComponentTargetVersionSet indicates an expected call of ServerFirmwareComponentTargetVersionSet
func (mr *MockMetalCloudClientMockRecorder) ServerFirmwareComponentTargetVersionSet(serverComponentID, serverComponentFirmwareNewVersion interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ServerFirmwareComponentTargetVersionSet", reflect.TypeOf((*MockMetalCloudClient)(nil).ServerFirmwareComponentTargetVersionSet), serverComponentID, serverComponentFirmwareNewVersion)
}

// ServerFirmwareComponentTargetVersionUpdate mocks base method
func (m *MockMetalCloudClient) ServerFirmwareComponentTargetVersionUpdate(serverComponentID int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ServerFirmwareComponentTargetVersionUpdate", serverComponentID)
	ret0, _ := ret[0].(error)
	return ret0
}

// ServerFirmwareComponentTargetVersionUpdate indicates an expected call of ServerFirmwareComponentTargetVersionUpdate
func (mr *MockMetalCloudClientMockRecorder) ServerFirmwareComponentTargetVersionUpdate(serverComponentID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ServerFirmwareComponentTargetVersionUpdate", reflect.TypeOf((*MockMetalCloudClient)(nil).ServerFirmwareComponentTargetVersionUpdate), serverComponentID)
}

// ServerFirmwareComponentTargetVersionAdd mocks base method
func (m *MockMetalCloudClient) ServerFirmwareComponentTargetVersionAdd(serverComponentID int, version, firmareBinaryURL string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ServerFirmwareComponentTargetVersionAdd", serverComponentID, version, firmareBinaryURL)
	ret0, _ := ret[0].(error)
	return ret0
}

// ServerFirmwareComponentTargetVersionAdd indicates an expected call of ServerFirmwareComponentTargetVersionAdd
func (mr *MockMetalCloudClientMockRecorder) ServerFirmwareComponentTargetVersionAdd(serverComponentID, version, firmareBinaryURL interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ServerFirmwareComponentTargetVersionAdd", reflect.TypeOf((*MockMetalCloudClient)(nil).ServerFirmwareComponentTargetVersionAdd), serverComponentID, version, firmareBinaryURL)
}

// ServerComponentGet mocks base method
func (m *MockMetalCloudClient) ServerComponentGet(serverComponentID int) (*metalcloud.ServerComponent, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ServerComponentGet", serverComponentID)
	ret0, _ := ret[0].(*metalcloud.ServerComponent)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ServerComponentGet indicates an expected call of ServerComponentGet
func (mr *MockMetalCloudClientMockRecorder) ServerComponentGet(serverComponentID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ServerComponentGet", reflect.TypeOf((*MockMetalCloudClient)(nil).ServerComponentGet), serverComponentID)
}

// ServerComponents mocks base method
func (m *MockMetalCloudClient) ServerComponents(serverID int, filter string) (*[]metalcloud.ServerComponent, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ServerComponents", serverID, filter)
	ret0, _ := ret[0].(*[]metalcloud.ServerComponent)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ServerComponents indicates an expected call of ServerComponents
func (mr *MockMetalCloudClientMockRecorder) ServerComponents(serverID, filter interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ServerComponents", reflect.TypeOf((*MockMetalCloudClient)(nil).ServerComponents), serverID, filter)
}

// ServerPowerSet mocks base method
func (m *MockMetalCloudClient) ServerPowerSet(serverID int, operation string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ServerPowerSet", serverID, operation)
	ret0, _ := ret[0].(error)
	return ret0
}

// ServerPowerSet indicates an expected call of ServerPowerSet
func (mr *MockMetalCloudClientMockRecorder) ServerPowerSet(serverID, operation interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ServerPowerSet", reflect.TypeOf((*MockMetalCloudClient)(nil).ServerPowerSet), serverID, operation)
}

// ServerTypesMatchHardwareConfiguration mocks base method
func (m *MockMetalCloudClient) ServerTypesMatchHardwareConfiguration(datacenterName string, hardwareConfiguration metalcloud.HardwareConfiguration) (*map[int]metalcloud.ServerType, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ServerTypesMatchHardwareConfiguration", datacenterName, hardwareConfiguration)
	ret0, _ := ret[0].(*map[int]metalcloud.ServerType)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ServerTypesMatchHardwareConfiguration indicates an expected call of ServerTypesMatchHardwareConfiguration
func (mr *MockMetalCloudClientMockRecorder) ServerTypesMatchHardwareConfiguration(datacenterName, hardwareConfiguration interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ServerTypesMatchHardwareConfiguration", reflect.TypeOf((*MockMetalCloudClient)(nil).ServerTypesMatchHardwareConfiguration), datacenterName, hardwareConfiguration)
}

// ServerTypeDatacenter mocks base method
func (m *MockMetalCloudClient) ServerTypeDatacenter(datacenterName string) (*[]int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ServerTypeDatacenter", datacenterName)
	ret0, _ := ret[0].(*[]int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ServerTypeDatacenter indicates an expected call of ServerTypeDatacenter
func (mr *MockMetalCloudClientMockRecorder) ServerTypeDatacenter(datacenterName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ServerTypeDatacenter", reflect.TypeOf((*MockMetalCloudClient)(nil).ServerTypeDatacenter), datacenterName)
}

// ServerTypes mocks base method
func (m *MockMetalCloudClient) ServerTypes(bOnlyAvailable bool) (*map[int]metalcloud.ServerType, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ServerTypes", bOnlyAvailable)
	ret0, _ := ret[0].(*map[int]metalcloud.ServerType)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ServerTypes indicates an expected call of ServerTypes
func (mr *MockMetalCloudClientMockRecorder) ServerTypes(bOnlyAvailable interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ServerTypes", reflect.TypeOf((*MockMetalCloudClient)(nil).ServerTypes), bOnlyAvailable)
}

// ServerTypesForDatacenter mocks base method
func (m *MockMetalCloudClient) ServerTypesForDatacenter(datacenterName string, bOnlyAvailable bool) (*map[int]metalcloud.ServerType, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ServerTypesForDatacenter", datacenterName, bOnlyAvailable)
	ret0, _ := ret[0].(*map[int]metalcloud.ServerType)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ServerTypesForDatacenter indicates an expected call of ServerTypesForDatacenter
func (mr *MockMetalCloudClientMockRecorder) ServerTypesForDatacenter(datacenterName, bOnlyAvailable interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ServerTypesForDatacenter", reflect.TypeOf((*MockMetalCloudClient)(nil).ServerTypesForDatacenter), datacenterName, bOnlyAvailable)
}

// ServerTypeGet mocks base method
func (m *MockMetalCloudClient) ServerTypeGet(serverTypeID int) (*metalcloud.ServerType, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ServerTypeGet", serverTypeID)
	ret0, _ := ret[0].(*metalcloud.ServerType)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ServerTypeGet indicates an expected call of ServerTypeGet
func (mr *MockMetalCloudClientMockRecorder) ServerTypeGet(serverTypeID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ServerTypeGet", reflect.TypeOf((*MockMetalCloudClient)(nil).ServerTypeGet), serverTypeID)
}

// ServerTypeGetByLabel mocks base method
func (m *MockMetalCloudClient) ServerTypeGetByLabel(serverTypeLabel string) (*metalcloud.ServerType, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ServerTypeGetByLabel", serverTypeLabel)
	ret0, _ := ret[0].(*metalcloud.ServerType)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ServerTypeGetByLabel indicates an expected call of ServerTypeGetByLabel
func (mr *MockMetalCloudClientMockRecorder) ServerTypeGetByLabel(serverTypeLabel interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ServerTypeGetByLabel", reflect.TypeOf((*MockMetalCloudClient)(nil).ServerTypeGetByLabel), serverTypeLabel)
}

// ServerTypesMatches mocks base method
func (m *MockMetalCloudClient) ServerTypesMatches(infrastructureID int, hardwareConfiguration metalcloud.HardwareConfiguration, instanceArrayID *int, bAllowServerSwap bool) (*map[string]metalcloud.ServerType, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ServerTypesMatches", infrastructureID, hardwareConfiguration, instanceArrayID, bAllowServerSwap)
	ret0, _ := ret[0].(*map[string]metalcloud.ServerType)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ServerTypesMatches indicates an expected call of ServerTypesMatches
func (mr *MockMetalCloudClientMockRecorder) ServerTypesMatches(infrastructureID, hardwareConfiguration, instanceArrayID, bAllowServerSwap interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ServerTypesMatches", reflect.TypeOf((*MockMetalCloudClient)(nil).ServerTypesMatches), infrastructureID, hardwareConfiguration, instanceArrayID, bAllowServerSwap)
}

// ServerTypesMatchesByLabel mocks base method
func (m *MockMetalCloudClient) ServerTypesMatchesByLabel(infrastructureLabel string, hardwareConfiguration metalcloud.HardwareConfiguration, instanceArrayID *int, bAllowServerSwap bool) (*map[string]metalcloud.ServerType, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ServerTypesMatchesByLabel", infrastructureLabel, hardwareConfiguration, instanceArrayID, bAllowServerSwap)
	ret0, _ := ret[0].(*map[string]metalcloud.ServerType)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ServerTypesMatchesByLabel indicates an expected call of ServerTypesMatchesByLabel
func (mr *MockMetalCloudClientMockRecorder) ServerTypesMatchesByLabel(infrastructureLabel, hardwareConfiguration, instanceArrayID, bAllowServerSwap interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ServerTypesMatchesByLabel", reflect.TypeOf((*MockMetalCloudClient)(nil).ServerTypesMatchesByLabel), infrastructureLabel, hardwareConfiguration, instanceArrayID, bAllowServerSwap)
}

// SharedDriveCreate mocks base method
func (m *MockMetalCloudClient) SharedDriveCreate(infrastructureID int, sharedDrive metalcloud.SharedDrive) (*metalcloud.SharedDrive, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SharedDriveCreate", infrastructureID, sharedDrive)
	ret0, _ := ret[0].(*metalcloud.SharedDrive)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SharedDriveCreate indicates an expected call of SharedDriveCreate
func (mr *MockMetalCloudClientMockRecorder) SharedDriveCreate(infrastructureID, sharedDrive interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SharedDriveCreate", reflect.TypeOf((*MockMetalCloudClient)(nil).SharedDriveCreate), infrastructureID, sharedDrive)
}

// SharedDriveCreateByLabel mocks base method
func (m *MockMetalCloudClient) SharedDriveCreateByLabel(infrastructureLabel string, sharedDrive metalcloud.SharedDrive) (*metalcloud.SharedDrive, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SharedDriveCreateByLabel", infrastructureLabel, sharedDrive)
	ret0, _ := ret[0].(*metalcloud.SharedDrive)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SharedDriveCreateByLabel indicates an expected call of SharedDriveCreateByLabel
func (mr *MockMetalCloudClientMockRecorder) SharedDriveCreateByLabel(infrastructureLabel, sharedDrive interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SharedDriveCreateByLabel", reflect.TypeOf((*MockMetalCloudClient)(nil).SharedDriveCreateByLabel), infrastructureLabel, sharedDrive)
}

// SharedDriveGet mocks base method
func (m *MockMetalCloudClient) SharedDriveGet(sharedDriveID int) (*metalcloud.SharedDrive, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SharedDriveGet", sharedDriveID)
	ret0, _ := ret[0].(*metalcloud.SharedDrive)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SharedDriveGet indicates an expected call of SharedDriveGet
func (mr *MockMetalCloudClientMockRecorder) SharedDriveGet(sharedDriveID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SharedDriveGet", reflect.TypeOf((*MockMetalCloudClient)(nil).SharedDriveGet), sharedDriveID)
}

// SharedDriveGetByLabel mocks base method
func (m *MockMetalCloudClient) SharedDriveGetByLabel(sharedDriveLabel string) (*metalcloud.SharedDrive, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SharedDriveGetByLabel", sharedDriveLabel)
	ret0, _ := ret[0].(*metalcloud.SharedDrive)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SharedDriveGetByLabel indicates an expected call of SharedDriveGetByLabel
func (mr *MockMetalCloudClientMockRecorder) SharedDriveGetByLabel(sharedDriveLabel interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SharedDriveGetByLabel", reflect.TypeOf((*MockMetalCloudClient)(nil).SharedDriveGetByLabel), sharedDriveLabel)
}

// SharedDriveEdit mocks base method
func (m *MockMetalCloudClient) SharedDriveEdit(sharedDriveID int, sharedDriveOperation metalcloud.SharedDriveOperation) (*metalcloud.SharedDrive, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SharedDriveEdit", sharedDriveID, sharedDriveOperation)
	ret0, _ := ret[0].(*metalcloud.SharedDrive)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SharedDriveEdit indicates an expected call of SharedDriveEdit
func (mr *MockMetalCloudClientMockRecorder) SharedDriveEdit(sharedDriveID, sharedDriveOperation interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SharedDriveEdit", reflect.TypeOf((*MockMetalCloudClient)(nil).SharedDriveEdit), sharedDriveID, sharedDriveOperation)
}

// SharedDriveEditByLabel mocks base method
func (m *MockMetalCloudClient) SharedDriveEditByLabel(sharedDriveLabel string, sharedDriveOperation metalcloud.SharedDriveOperation) (*metalcloud.SharedDrive, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SharedDriveEditByLabel", sharedDriveLabel, sharedDriveOperation)
	ret0, _ := ret[0].(*metalcloud.SharedDrive)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SharedDriveEditByLabel indicates an expected call of SharedDriveEditByLabel
func (mr *MockMetalCloudClientMockRecorder) SharedDriveEditByLabel(sharedDriveLabel, sharedDriveOperation interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SharedDriveEditByLabel", reflect.TypeOf((*MockMetalCloudClient)(nil).SharedDriveEditByLabel), sharedDriveLabel, sharedDriveOperation)
}

// SharedDriveDelete mocks base method
func (m *MockMetalCloudClient) SharedDriveDelete(sharedDriveID int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SharedDriveDelete", sharedDriveID)
	ret0, _ := ret[0].(error)
	return ret0
}

// SharedDriveDelete indicates an expected call of SharedDriveDelete
func (mr *MockMetalCloudClientMockRecorder) SharedDriveDelete(sharedDriveID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SharedDriveDelete", reflect.TypeOf((*MockMetalCloudClient)(nil).SharedDriveDelete), sharedDriveID)
}

// SharedDriveDeleteByLabel mocks base method
func (m *MockMetalCloudClient) SharedDriveDeleteByLabel(sharedDriveLabel string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SharedDriveDeleteByLabel", sharedDriveLabel)
	ret0, _ := ret[0].(error)
	return ret0
}

// SharedDriveDeleteByLabel indicates an expected call of SharedDriveDeleteByLabel
func (mr *MockMetalCloudClientMockRecorder) SharedDriveDeleteByLabel(sharedDriveLabel interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SharedDriveDeleteByLabel", reflect.TypeOf((*MockMetalCloudClient)(nil).SharedDriveDeleteByLabel), sharedDriveLabel)
}

// StageDefinitionCreate mocks base method
func (m *MockMetalCloudClient) StageDefinitionCreate(stageDefinition metalcloud.StageDefinition) (*metalcloud.StageDefinition, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StageDefinitionCreate", stageDefinition)
	ret0, _ := ret[0].(*metalcloud.StageDefinition)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// StageDefinitionCreate indicates an expected call of StageDefinitionCreate
func (mr *MockMetalCloudClientMockRecorder) StageDefinitionCreate(stageDefinition interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StageDefinitionCreate", reflect.TypeOf((*MockMetalCloudClient)(nil).StageDefinitionCreate), stageDefinition)
}

// StageDefinitionDelete mocks base method
func (m *MockMetalCloudClient) StageDefinitionDelete(stageDefinitionID int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StageDefinitionDelete", stageDefinitionID)
	ret0, _ := ret[0].(error)
	return ret0
}

// StageDefinitionDelete indicates an expected call of StageDefinitionDelete
func (mr *MockMetalCloudClientMockRecorder) StageDefinitionDelete(stageDefinitionID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StageDefinitionDelete", reflect.TypeOf((*MockMetalCloudClient)(nil).StageDefinitionDelete), stageDefinitionID)
}

// StageDefinitionUpdate mocks base method
func (m *MockMetalCloudClient) StageDefinitionUpdate(stageDefinitionID int, stageDefinition metalcloud.StageDefinition) (*metalcloud.StageDefinition, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StageDefinitionUpdate", stageDefinitionID, stageDefinition)
	ret0, _ := ret[0].(*metalcloud.StageDefinition)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// StageDefinitionUpdate indicates an expected call of StageDefinitionUpdate
func (mr *MockMetalCloudClientMockRecorder) StageDefinitionUpdate(stageDefinitionID, stageDefinition interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StageDefinitionUpdate", reflect.TypeOf((*MockMetalCloudClient)(nil).StageDefinitionUpdate), stageDefinitionID, stageDefinition)
}

// StageDefinitionGet mocks base method
func (m *MockMetalCloudClient) StageDefinitionGet(stageDefinitionID int) (*metalcloud.StageDefinition, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StageDefinitionGet", stageDefinitionID)
	ret0, _ := ret[0].(*metalcloud.StageDefinition)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// StageDefinitionGet indicates an expected call of StageDefinitionGet
func (mr *MockMetalCloudClientMockRecorder) StageDefinitionGet(stageDefinitionID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StageDefinitionGet", reflect.TypeOf((*MockMetalCloudClient)(nil).StageDefinitionGet), stageDefinitionID)
}

// StageDefinitions mocks base method
func (m *MockMetalCloudClient) StageDefinitions() (*map[string]metalcloud.StageDefinition, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StageDefinitions")
	ret0, _ := ret[0].(*map[string]metalcloud.StageDefinition)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// StageDefinitions indicates an expected call of StageDefinitions
func (mr *MockMetalCloudClientMockRecorder) StageDefinitions() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StageDefinitions", reflect.TypeOf((*MockMetalCloudClient)(nil).StageDefinitions))
}

// SubnetPoolCreate mocks base method
func (m *MockMetalCloudClient) SubnetPoolCreate(subnetPool metalcloud.SubnetPool) (*metalcloud.SubnetPool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SubnetPoolCreate", subnetPool)
	ret0, _ := ret[0].(*metalcloud.SubnetPool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SubnetPoolCreate indicates an expected call of SubnetPoolCreate
func (mr *MockMetalCloudClientMockRecorder) SubnetPoolCreate(subnetPool interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SubnetPoolCreate", reflect.TypeOf((*MockMetalCloudClient)(nil).SubnetPoolCreate), subnetPool)
}

// SubnetPoolGet mocks base method
func (m *MockMetalCloudClient) SubnetPoolGet(subnetPoolID int) (*metalcloud.SubnetPool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SubnetPoolGet", subnetPoolID)
	ret0, _ := ret[0].(*metalcloud.SubnetPool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SubnetPoolGet indicates an expected call of SubnetPoolGet
func (mr *MockMetalCloudClientMockRecorder) SubnetPoolGet(subnetPoolID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SubnetPoolGet", reflect.TypeOf((*MockMetalCloudClient)(nil).SubnetPoolGet), subnetPoolID)
}

// SubnetPoolPrefixSizesStats mocks base method
func (m *MockMetalCloudClient) SubnetPoolPrefixSizesStats(subnetPoolID int) (*metalcloud.SubnetPoolUtilization, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SubnetPoolPrefixSizesStats", subnetPoolID)
	ret0, _ := ret[0].(*metalcloud.SubnetPoolUtilization)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SubnetPoolPrefixSizesStats indicates an expected call of SubnetPoolPrefixSizesStats
func (mr *MockMetalCloudClientMockRecorder) SubnetPoolPrefixSizesStats(subnetPoolID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SubnetPoolPrefixSizesStats", reflect.TypeOf((*MockMetalCloudClient)(nil).SubnetPoolPrefixSizesStats), subnetPoolID)
}

// SubnetPoolDelete mocks base method
func (m *MockMetalCloudClient) SubnetPoolDelete(subnetPoolID int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SubnetPoolDelete", subnetPoolID)
	ret0, _ := ret[0].(error)
	return ret0
}

// SubnetPoolDelete indicates an expected call of SubnetPoolDelete
func (mr *MockMetalCloudClientMockRecorder) SubnetPoolDelete(subnetPoolID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SubnetPoolDelete", reflect.TypeOf((*MockMetalCloudClient)(nil).SubnetPoolDelete), subnetPoolID)
}

// SubnetPools mocks base method
func (m *MockMetalCloudClient) SubnetPools() (*[]metalcloud.SubnetPool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SubnetPools")
	ret0, _ := ret[0].(*[]metalcloud.SubnetPool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SubnetPools indicates an expected call of SubnetPools
func (mr *MockMetalCloudClientMockRecorder) SubnetPools() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SubnetPools", reflect.TypeOf((*MockMetalCloudClient)(nil).SubnetPools))
}

// SubnetPoolSearch mocks base method
func (m *MockMetalCloudClient) SubnetPoolSearch(filter string) (*[]metalcloud.SubnetPool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SubnetPoolSearch", filter)
	ret0, _ := ret[0].(*[]metalcloud.SubnetPool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SubnetPoolSearch indicates an expected call of SubnetPoolSearch
func (mr *MockMetalCloudClientMockRecorder) SubnetPoolSearch(filter interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SubnetPoolSearch", reflect.TypeOf((*MockMetalCloudClient)(nil).SubnetPoolSearch), filter)
}

// SwitchDeviceGet mocks base method
func (m *MockMetalCloudClient) SwitchDeviceGet(networkEquipmentID int, decryptPasswd bool) (*metalcloud.SwitchDevice, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SwitchDeviceGet", networkEquipmentID, decryptPasswd)
	ret0, _ := ret[0].(*metalcloud.SwitchDevice)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SwitchDeviceGet indicates an expected call of SwitchDeviceGet
func (mr *MockMetalCloudClientMockRecorder) SwitchDeviceGet(networkEquipmentID, decryptPasswd interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SwitchDeviceGet", reflect.TypeOf((*MockMetalCloudClient)(nil).SwitchDeviceGet), networkEquipmentID, decryptPasswd)
}

// SwitchDeviceGetByIdentifierString mocks base method
func (m *MockMetalCloudClient) SwitchDeviceGetByIdentifierString(networkEquipmentIdentifierString string, decryptPasswd bool) (*metalcloud.SwitchDevice, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SwitchDeviceGetByIdentifierString", networkEquipmentIdentifierString, decryptPasswd)
	ret0, _ := ret[0].(*metalcloud.SwitchDevice)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SwitchDeviceGetByIdentifierString indicates an expected call of SwitchDeviceGetByIdentifierString
func (mr *MockMetalCloudClientMockRecorder) SwitchDeviceGetByIdentifierString(networkEquipmentIdentifierString, decryptPasswd interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SwitchDeviceGetByIdentifierString", reflect.TypeOf((*MockMetalCloudClient)(nil).SwitchDeviceGetByIdentifierString), networkEquipmentIdentifierString, decryptPasswd)
}

// SwitchDeviceCreate mocks base method
func (m *MockMetalCloudClient) SwitchDeviceCreate(switchDevice metalcloud.SwitchDevice, bOverwriteWithHostnameFromFetchedSwitch bool) (*metalcloud.SwitchDevice, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SwitchDeviceCreate", switchDevice, bOverwriteWithHostnameFromFetchedSwitch)
	ret0, _ := ret[0].(*metalcloud.SwitchDevice)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SwitchDeviceCreate indicates an expected call of SwitchDeviceCreate
func (mr *MockMetalCloudClientMockRecorder) SwitchDeviceCreate(switchDevice, bOverwriteWithHostnameFromFetchedSwitch interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SwitchDeviceCreate", reflect.TypeOf((*MockMetalCloudClient)(nil).SwitchDeviceCreate), switchDevice, bOverwriteWithHostnameFromFetchedSwitch)
}

// SwitchDeviceDelete mocks base method
func (m *MockMetalCloudClient) SwitchDeviceDelete(networkEquipmentID int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SwitchDeviceDelete", networkEquipmentID)
	ret0, _ := ret[0].(error)
	return ret0
}

// SwitchDeviceDelete indicates an expected call of SwitchDeviceDelete
func (mr *MockMetalCloudClientMockRecorder) SwitchDeviceDelete(networkEquipmentID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SwitchDeviceDelete", reflect.TypeOf((*MockMetalCloudClient)(nil).SwitchDeviceDelete), networkEquipmentID)
}

// SwitchDevices mocks base method
func (m *MockMetalCloudClient) SwitchDevices(datacenter, switchType string) (*map[string]metalcloud.SwitchDevice, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SwitchDevices", datacenter, switchType)
	ret0, _ := ret[0].(*map[string]metalcloud.SwitchDevice)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SwitchDevices indicates an expected call of SwitchDevices
func (mr *MockMetalCloudClientMockRecorder) SwitchDevices(datacenter, switchType interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SwitchDevices", reflect.TypeOf((*MockMetalCloudClient)(nil).SwitchDevices), datacenter, switchType)
}

// SwitchDevicesInDatacenter mocks base method
func (m *MockMetalCloudClient) SwitchDevicesInDatacenter(datacenter string) (*map[string]metalcloud.SwitchDevice, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SwitchDevicesInDatacenter", datacenter)
	ret0, _ := ret[0].(*map[string]metalcloud.SwitchDevice)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SwitchDevicesInDatacenter indicates an expected call of SwitchDevicesInDatacenter
func (mr *MockMetalCloudClientMockRecorder) SwitchDevicesInDatacenter(datacenter interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SwitchDevicesInDatacenter", reflect.TypeOf((*MockMetalCloudClient)(nil).SwitchDevicesInDatacenter), datacenter)
}

// SwitchDeviceUpdate mocks base method
func (m *MockMetalCloudClient) SwitchDeviceUpdate(networkEquipmentID int, switchDevice metalcloud.SwitchDevice, bOverwriteWithHostnameFromFetchedSwitch bool) (*metalcloud.SwitchDevice, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SwitchDeviceUpdate", networkEquipmentID, switchDevice, bOverwriteWithHostnameFromFetchedSwitch)
	ret0, _ := ret[0].(*metalcloud.SwitchDevice)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SwitchDeviceUpdate indicates an expected call of SwitchDeviceUpdate
func (mr *MockMetalCloudClientMockRecorder) SwitchDeviceUpdate(networkEquipmentID, switchDevice, bOverwriteWithHostnameFromFetchedSwitch interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SwitchDeviceUpdate", reflect.TypeOf((*MockMetalCloudClient)(nil).SwitchDeviceUpdate), networkEquipmentID, switchDevice, bOverwriteWithHostnameFromFetchedSwitch)
}

// UserGet mocks base method
func (m *MockMetalCloudClient) UserGet(userID int) (*metalcloud.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UserGet", userID)
	ret0, _ := ret[0].(*metalcloud.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UserGet indicates an expected call of UserGet
func (mr *MockMetalCloudClientMockRecorder) UserGet(userID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UserGet", reflect.TypeOf((*MockMetalCloudClient)(nil).UserGet), userID)
}

// UserGetByEmail mocks base method
func (m *MockMetalCloudClient) UserGetByEmail(userLabel string) (*metalcloud.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UserGetByEmail", userLabel)
	ret0, _ := ret[0].(*metalcloud.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UserGetByEmail indicates an expected call of UserGetByEmail
func (mr *MockMetalCloudClientMockRecorder) UserGetByEmail(userLabel interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UserGetByEmail", reflect.TypeOf((*MockMetalCloudClient)(nil).UserGetByEmail), userLabel)
}

// UserEmailToUserID mocks base method
func (m *MockMetalCloudClient) UserEmailToUserID(userEmail string) (*int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UserEmailToUserID", userEmail)
	ret0, _ := ret[0].(*int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UserEmailToUserID indicates an expected call of UserEmailToUserID
func (mr *MockMetalCloudClientMockRecorder) UserEmailToUserID(userEmail interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UserEmailToUserID", reflect.TypeOf((*MockMetalCloudClient)(nil).UserEmailToUserID), userEmail)
}

// VariableCreate mocks base method
func (m *MockMetalCloudClient) VariableCreate(variable metalcloud.Variable) (*metalcloud.Variable, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "VariableCreate", variable)
	ret0, _ := ret[0].(*metalcloud.Variable)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// VariableCreate indicates an expected call of VariableCreate
func (mr *MockMetalCloudClientMockRecorder) VariableCreate(variable interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "VariableCreate", reflect.TypeOf((*MockMetalCloudClient)(nil).VariableCreate), variable)
}

// VariableDelete mocks base method
func (m *MockMetalCloudClient) VariableDelete(variableID int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "VariableDelete", variableID)
	ret0, _ := ret[0].(error)
	return ret0
}

// VariableDelete indicates an expected call of VariableDelete
func (mr *MockMetalCloudClientMockRecorder) VariableDelete(variableID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "VariableDelete", reflect.TypeOf((*MockMetalCloudClient)(nil).VariableDelete), variableID)
}

// VariableUpdate mocks base method
func (m *MockMetalCloudClient) VariableUpdate(variableID int, variable metalcloud.Variable) (*metalcloud.Variable, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "VariableUpdate", variableID, variable)
	ret0, _ := ret[0].(*metalcloud.Variable)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// VariableUpdate indicates an expected call of VariableUpdate
func (mr *MockMetalCloudClientMockRecorder) VariableUpdate(variableID, variable interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "VariableUpdate", reflect.TypeOf((*MockMetalCloudClient)(nil).VariableUpdate), variableID, variable)
}

// VariableGet mocks base method
func (m *MockMetalCloudClient) VariableGet(variableID int) (*metalcloud.Variable, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "VariableGet", variableID)
	ret0, _ := ret[0].(*metalcloud.Variable)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// VariableGet indicates an expected call of VariableGet
func (mr *MockMetalCloudClientMockRecorder) VariableGet(variableID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "VariableGet", reflect.TypeOf((*MockMetalCloudClient)(nil).VariableGet), variableID)
}

// Variables mocks base method
func (m *MockMetalCloudClient) Variables(usage string) (*map[string]metalcloud.Variable, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Variables", usage)
	ret0, _ := ret[0].(*map[string]metalcloud.Variable)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Variables indicates an expected call of Variables
func (mr *MockMetalCloudClientMockRecorder) Variables(usage interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Variables", reflect.TypeOf((*MockMetalCloudClient)(nil).Variables), usage)
}

// VolumeTemplates mocks base method
func (m *MockMetalCloudClient) VolumeTemplates() (*map[string]metalcloud.VolumeTemplate, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "VolumeTemplates")
	ret0, _ := ret[0].(*map[string]metalcloud.VolumeTemplate)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// VolumeTemplates indicates an expected call of VolumeTemplates
func (mr *MockMetalCloudClientMockRecorder) VolumeTemplates() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "VolumeTemplates", reflect.TypeOf((*MockMetalCloudClient)(nil).VolumeTemplates))
}

// VolumeTemplateMakePublic mocks base method
func (m *MockMetalCloudClient) VolumeTemplateMakePublic(volumeTemplateID int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "VolumeTemplateMakePublic", volumeTemplateID)
	ret0, _ := ret[0].(error)
	return ret0
}

// VolumeTemplateMakePublic indicates an expected call of VolumeTemplateMakePublic
func (mr *MockMetalCloudClientMockRecorder) VolumeTemplateMakePublic(volumeTemplateID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "VolumeTemplateMakePublic", reflect.TypeOf((*MockMetalCloudClient)(nil).VolumeTemplateMakePublic), volumeTemplateID)
}

// VolumeTemplateMakePrivate mocks base method
func (m *MockMetalCloudClient) VolumeTemplateMakePrivate(volumeTemplateID, userID int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "VolumeTemplateMakePrivate", volumeTemplateID, userID)
	ret0, _ := ret[0].(error)
	return ret0
}

// VolumeTemplateMakePrivate indicates an expected call of VolumeTemplateMakePrivate
func (mr *MockMetalCloudClientMockRecorder) VolumeTemplateMakePrivate(volumeTemplateID, userID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "VolumeTemplateMakePrivate", reflect.TypeOf((*MockMetalCloudClient)(nil).VolumeTemplateMakePrivate), volumeTemplateID, userID)
}

// VolumeTemplateGet mocks base method
func (m *MockMetalCloudClient) VolumeTemplateGet(volumeTemplateID int) (*metalcloud.VolumeTemplate, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "VolumeTemplateGet", volumeTemplateID)
	ret0, _ := ret[0].(*metalcloud.VolumeTemplate)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// VolumeTemplateGet indicates an expected call of VolumeTemplateGet
func (mr *MockMetalCloudClientMockRecorder) VolumeTemplateGet(volumeTemplateID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "VolumeTemplateGet", reflect.TypeOf((*MockMetalCloudClient)(nil).VolumeTemplateGet), volumeTemplateID)
}

// VolumeTemplateGetByLabel mocks base method
func (m *MockMetalCloudClient) VolumeTemplateGetByLabel(volumeTemplateLabel string) (*metalcloud.VolumeTemplate, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "VolumeTemplateGetByLabel", volumeTemplateLabel)
	ret0, _ := ret[0].(*metalcloud.VolumeTemplate)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// VolumeTemplateGetByLabel indicates an expected call of VolumeTemplateGetByLabel
func (mr *MockMetalCloudClientMockRecorder) VolumeTemplateGetByLabel(volumeTemplateLabel interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "VolumeTemplateGetByLabel", reflect.TypeOf((*MockMetalCloudClient)(nil).VolumeTemplateGetByLabel), volumeTemplateLabel)
}

// VolumeTemplateCreateFromDrive mocks base method
func (m *MockMetalCloudClient) VolumeTemplateCreateFromDrive(driveID int, objVolumeTemplate metalcloud.VolumeTemplate) (*metalcloud.VolumeTemplate, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "VolumeTemplateCreateFromDrive", driveID, objVolumeTemplate)
	ret0, _ := ret[0].(*metalcloud.VolumeTemplate)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// VolumeTemplateCreateFromDrive indicates an expected call of VolumeTemplateCreateFromDrive
func (mr *MockMetalCloudClientMockRecorder) VolumeTemplateCreateFromDrive(driveID, objVolumeTemplate interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "VolumeTemplateCreateFromDrive", reflect.TypeOf((*MockMetalCloudClient)(nil).VolumeTemplateCreateFromDrive), driveID, objVolumeTemplate)
}

// VolumeTemplateCreateFromDriveByLabel mocks base method
func (m *MockMetalCloudClient) VolumeTemplateCreateFromDriveByLabel(driveLabel string, objVolumeTemplate metalcloud.VolumeTemplate) (*metalcloud.VolumeTemplate, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "VolumeTemplateCreateFromDriveByLabel", driveLabel, objVolumeTemplate)
	ret0, _ := ret[0].(*metalcloud.VolumeTemplate)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// VolumeTemplateCreateFromDriveByLabel indicates an expected call of VolumeTemplateCreateFromDriveByLabel
func (mr *MockMetalCloudClientMockRecorder) VolumeTemplateCreateFromDriveByLabel(driveLabel, objVolumeTemplate interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "VolumeTemplateCreateFromDriveByLabel", reflect.TypeOf((*MockMetalCloudClient)(nil).VolumeTemplateCreateFromDriveByLabel), driveLabel, objVolumeTemplate)
}

// WorkflowCreate mocks base method
func (m *MockMetalCloudClient) WorkflowCreate(workflow metalcloud.Workflow) (*metalcloud.Workflow, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WorkflowCreate", workflow)
	ret0, _ := ret[0].(*metalcloud.Workflow)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// WorkflowCreate indicates an expected call of WorkflowCreate
func (mr *MockMetalCloudClientMockRecorder) WorkflowCreate(workflow interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WorkflowCreate", reflect.TypeOf((*MockMetalCloudClient)(nil).WorkflowCreate), workflow)
}

// WorkflowDelete mocks base method
func (m *MockMetalCloudClient) WorkflowDelete(workflowID int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WorkflowDelete", workflowID)
	ret0, _ := ret[0].(error)
	return ret0
}

// WorkflowDelete indicates an expected call of WorkflowDelete
func (mr *MockMetalCloudClientMockRecorder) WorkflowDelete(workflowID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WorkflowDelete", reflect.TypeOf((*MockMetalCloudClient)(nil).WorkflowDelete), workflowID)
}

// WorkflowUpdate mocks base method
func (m *MockMetalCloudClient) WorkflowUpdate(workflowID int, workflow metalcloud.Workflow) (*metalcloud.Workflow, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WorkflowUpdate", workflowID, workflow)
	ret0, _ := ret[0].(*metalcloud.Workflow)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// WorkflowUpdate indicates an expected call of WorkflowUpdate
func (mr *MockMetalCloudClientMockRecorder) WorkflowUpdate(workflowID, workflow interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WorkflowUpdate", reflect.TypeOf((*MockMetalCloudClient)(nil).WorkflowUpdate), workflowID, workflow)
}

// WorkflowGet mocks base method
func (m *MockMetalCloudClient) WorkflowGet(workflowID int) (*metalcloud.Workflow, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WorkflowGet", workflowID)
	ret0, _ := ret[0].(*metalcloud.Workflow)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// WorkflowGet indicates an expected call of WorkflowGet
func (mr *MockMetalCloudClientMockRecorder) WorkflowGet(workflowID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WorkflowGet", reflect.TypeOf((*MockMetalCloudClient)(nil).WorkflowGet), workflowID)
}

// Workflows mocks base method
func (m *MockMetalCloudClient) Workflows() (*map[string]metalcloud.Workflow, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Workflows")
	ret0, _ := ret[0].(*map[string]metalcloud.Workflow)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Workflows indicates an expected call of Workflows
func (mr *MockMetalCloudClientMockRecorder) Workflows() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Workflows", reflect.TypeOf((*MockMetalCloudClient)(nil).Workflows))
}

// WorkflowsWithUsage mocks base method
func (m *MockMetalCloudClient) WorkflowsWithUsage(usage string) (*map[string]metalcloud.Workflow, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WorkflowsWithUsage", usage)
	ret0, _ := ret[0].(*map[string]metalcloud.Workflow)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// WorkflowsWithUsage indicates an expected call of WorkflowsWithUsage
func (mr *MockMetalCloudClientMockRecorder) WorkflowsWithUsage(usage interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WorkflowsWithUsage", reflect.TypeOf((*MockMetalCloudClient)(nil).WorkflowsWithUsage), usage)
}

// WorkflowStages mocks base method
func (m *MockMetalCloudClient) WorkflowStages(workflowID int) (*[]metalcloud.WorkflowStageDefinitionReference, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WorkflowStages", workflowID)
	ret0, _ := ret[0].(*[]metalcloud.WorkflowStageDefinitionReference)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// WorkflowStages indicates an expected call of WorkflowStages
func (mr *MockMetalCloudClientMockRecorder) WorkflowStages(workflowID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WorkflowStages", reflect.TypeOf((*MockMetalCloudClient)(nil).WorkflowStages), workflowID)
}

// WorkflowStageGet mocks base method
func (m *MockMetalCloudClient) WorkflowStageGet(workflowStageID int) (*metalcloud.WorkflowStageDefinitionReference, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WorkflowStageGet", workflowStageID)
	ret0, _ := ret[0].(*metalcloud.WorkflowStageDefinitionReference)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// WorkflowStageGet indicates an expected call of WorkflowStageGet
func (mr *MockMetalCloudClientMockRecorder) WorkflowStageGet(workflowStageID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WorkflowStageGet", reflect.TypeOf((*MockMetalCloudClient)(nil).WorkflowStageGet), workflowStageID)
}

// WorkflowStageAddAsNewRunLevel mocks base method
func (m *MockMetalCloudClient) WorkflowStageAddAsNewRunLevel(workflowID, stageDefinitionID, destinationRunLevel int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WorkflowStageAddAsNewRunLevel", workflowID, stageDefinitionID, destinationRunLevel)
	ret0, _ := ret[0].(error)
	return ret0
}

// WorkflowStageAddAsNewRunLevel indicates an expected call of WorkflowStageAddAsNewRunLevel
func (mr *MockMetalCloudClientMockRecorder) WorkflowStageAddAsNewRunLevel(workflowID, stageDefinitionID, destinationRunLevel interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WorkflowStageAddAsNewRunLevel", reflect.TypeOf((*MockMetalCloudClient)(nil).WorkflowStageAddAsNewRunLevel), workflowID, stageDefinitionID, destinationRunLevel)
}

// WorkflowStageAddIntoRunLevel mocks base method
func (m *MockMetalCloudClient) WorkflowStageAddIntoRunLevel(workflowID, stageDefinitionID, destinationRunLevel int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WorkflowStageAddIntoRunLevel", workflowID, stageDefinitionID, destinationRunLevel)
	ret0, _ := ret[0].(error)
	return ret0
}

// WorkflowStageAddIntoRunLevel indicates an expected call of WorkflowStageAddIntoRunLevel
func (mr *MockMetalCloudClientMockRecorder) WorkflowStageAddIntoRunLevel(workflowID, stageDefinitionID, destinationRunLevel interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WorkflowStageAddIntoRunLevel", reflect.TypeOf((*MockMetalCloudClient)(nil).WorkflowStageAddIntoRunLevel), workflowID, stageDefinitionID, destinationRunLevel)
}

// WorkflowMoveAsNewRunLevel mocks base method
func (m *MockMetalCloudClient) WorkflowMoveAsNewRunLevel(workflowID, stageDefinitionID, sourceRunLevel, destinationRunLevel int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WorkflowMoveAsNewRunLevel", workflowID, stageDefinitionID, sourceRunLevel, destinationRunLevel)
	ret0, _ := ret[0].(error)
	return ret0
}

// WorkflowMoveAsNewRunLevel indicates an expected call of WorkflowMoveAsNewRunLevel
func (mr *MockMetalCloudClientMockRecorder) WorkflowMoveAsNewRunLevel(workflowID, stageDefinitionID, sourceRunLevel, destinationRunLevel interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WorkflowMoveAsNewRunLevel", reflect.TypeOf((*MockMetalCloudClient)(nil).WorkflowMoveAsNewRunLevel), workflowID, stageDefinitionID, sourceRunLevel, destinationRunLevel)
}

// WorkflowMoveIntoRunLevel mocks base method
func (m *MockMetalCloudClient) WorkflowMoveIntoRunLevel(workflowID, stageDefinitionID, sourceRunLevel, destinationRunLevel int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WorkflowMoveIntoRunLevel", workflowID, stageDefinitionID, sourceRunLevel, destinationRunLevel)
	ret0, _ := ret[0].(error)
	return ret0
}

// WorkflowMoveIntoRunLevel indicates an expected call of WorkflowMoveIntoRunLevel
func (mr *MockMetalCloudClientMockRecorder) WorkflowMoveIntoRunLevel(workflowID, stageDefinitionID, sourceRunLevel, destinationRunLevel interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WorkflowMoveIntoRunLevel", reflect.TypeOf((*MockMetalCloudClient)(nil).WorkflowMoveIntoRunLevel), workflowID, stageDefinitionID, sourceRunLevel, destinationRunLevel)
}

// WorkflowStageDelete mocks base method
func (m *MockMetalCloudClient) WorkflowStageDelete(workflowStageID int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WorkflowStageDelete", workflowStageID)
	ret0, _ := ret[0].(error)
	return ret0
}

// WorkflowStageDelete indicates an expected call of WorkflowStageDelete
func (mr *MockMetalCloudClientMockRecorder) WorkflowStageDelete(workflowStageID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WorkflowStageDelete", reflect.TypeOf((*MockMetalCloudClient)(nil).WorkflowStageDelete), workflowStageID)
}

// InfrastructureDeployCustomStageAddIntoRunlevel mocks base method
func (m *MockMetalCloudClient) InfrastructureDeployCustomStageAddIntoRunlevel(infraID, stageID, runLevel int, stageRunMoment string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InfrastructureDeployCustomStageAddIntoRunlevel", infraID, stageID, runLevel, stageRunMoment)
	ret0, _ := ret[0].(error)
	return ret0
}

// InfrastructureDeployCustomStageAddIntoRunlevel indicates an expected call of InfrastructureDeployCustomStageAddIntoRunlevel
func (mr *MockMetalCloudClientMockRecorder) InfrastructureDeployCustomStageAddIntoRunlevel(infraID, stageID, runLevel, stageRunMoment interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InfrastructureDeployCustomStageAddIntoRunlevel", reflect.TypeOf((*MockMetalCloudClient)(nil).InfrastructureDeployCustomStageAddIntoRunlevel), infraID, stageID, runLevel, stageRunMoment)
}

// InfrastructureDeployCustomStageDeleteIntoRunlevel mocks base method
func (m *MockMetalCloudClient) InfrastructureDeployCustomStageDeleteIntoRunlevel(infraID, stageID, runLevel int, stageRunMoment string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InfrastructureDeployCustomStageDeleteIntoRunlevel", infraID, stageID, runLevel, stageRunMoment)
	ret0, _ := ret[0].(error)
	return ret0
}

// InfrastructureDeployCustomStageDeleteIntoRunlevel indicates an expected call of InfrastructureDeployCustomStageDeleteIntoRunlevel
func (mr *MockMetalCloudClientMockRecorder) InfrastructureDeployCustomStageDeleteIntoRunlevel(infraID, stageID, runLevel, stageRunMoment interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InfrastructureDeployCustomStageDeleteIntoRunlevel", reflect.TypeOf((*MockMetalCloudClient)(nil).InfrastructureDeployCustomStageDeleteIntoRunlevel), infraID, stageID, runLevel, stageRunMoment)
}

// InfrastructureDeployCustomStages mocks base method
func (m *MockMetalCloudClient) InfrastructureDeployCustomStages(infraID int, stageDefinitionType string) (*[]metalcloud.WorkflowStageAssociation, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InfrastructureDeployCustomStages", infraID, stageDefinitionType)
	ret0, _ := ret[0].(*[]metalcloud.WorkflowStageAssociation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// InfrastructureDeployCustomStages indicates an expected call of InfrastructureDeployCustomStages
func (mr *MockMetalCloudClientMockRecorder) InfrastructureDeployCustomStages(infraID, stageDefinitionType interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InfrastructureDeployCustomStages", reflect.TypeOf((*MockMetalCloudClient)(nil).InfrastructureDeployCustomStages), infraID, stageDefinitionType)
}
